
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Equipamento
 * 
 */
export type Equipamento = $Result.DefaultSelection<Prisma.$EquipamentoPayload>
/**
 * Model Estoque
 * 
 */
export type Estoque = $Result.DefaultSelection<Prisma.$EstoquePayload>
/**
 * Model EstoqueItem
 * 
 */
export type EstoqueItem = $Result.DefaultSelection<Prisma.$EstoqueItemPayload>
/**
 * Model Transferencia
 * 
 */
export type Transferencia = $Result.DefaultSelection<Prisma.$TransferenciaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipamento`: Exposes CRUD operations for the **Equipamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipamentos
    * const equipamentos = await prisma.equipamento.findMany()
    * ```
    */
  get equipamento(): Prisma.EquipamentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.estoque`: Exposes CRUD operations for the **Estoque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estoques
    * const estoques = await prisma.estoque.findMany()
    * ```
    */
  get estoque(): Prisma.EstoqueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.estoqueItem`: Exposes CRUD operations for the **EstoqueItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EstoqueItems
    * const estoqueItems = await prisma.estoqueItem.findMany()
    * ```
    */
  get estoqueItem(): Prisma.EstoqueItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transferencia`: Exposes CRUD operations for the **Transferencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transferencias
    * const transferencias = await prisma.transferencia.findMany()
    * ```
    */
  get transferencia(): Prisma.TransferenciaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Equipamento: 'Equipamento',
    Estoque: 'Estoque',
    EstoqueItem: 'EstoqueItem',
    Transferencia: 'Transferencia'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "equipamento" | "estoque" | "estoqueItem" | "transferencia"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Equipamento: {
        payload: Prisma.$EquipamentoPayload<ExtArgs>
        fields: Prisma.EquipamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          findFirst: {
            args: Prisma.EquipamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          findMany: {
            args: Prisma.EquipamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>[]
          }
          create: {
            args: Prisma.EquipamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          createMany: {
            args: Prisma.EquipamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>[]
          }
          delete: {
            args: Prisma.EquipamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          update: {
            args: Prisma.EquipamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          deleteMany: {
            args: Prisma.EquipamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipamentoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>[]
          }
          upsert: {
            args: Prisma.EquipamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipamentoPayload>
          }
          aggregate: {
            args: Prisma.EquipamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipamento>
          }
          groupBy: {
            args: Prisma.EquipamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipamentoCountArgs<ExtArgs>
            result: $Utils.Optional<EquipamentoCountAggregateOutputType> | number
          }
        }
      }
      Estoque: {
        payload: Prisma.$EstoquePayload<ExtArgs>
        fields: Prisma.EstoqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstoqueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstoqueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>
          }
          findFirst: {
            args: Prisma.EstoqueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstoqueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>
          }
          findMany: {
            args: Prisma.EstoqueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>[]
          }
          create: {
            args: Prisma.EstoqueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>
          }
          createMany: {
            args: Prisma.EstoqueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EstoqueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>[]
          }
          delete: {
            args: Prisma.EstoqueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>
          }
          update: {
            args: Prisma.EstoqueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>
          }
          deleteMany: {
            args: Prisma.EstoqueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstoqueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EstoqueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>[]
          }
          upsert: {
            args: Prisma.EstoqueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoquePayload>
          }
          aggregate: {
            args: Prisma.EstoqueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstoque>
          }
          groupBy: {
            args: Prisma.EstoqueGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstoqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstoqueCountArgs<ExtArgs>
            result: $Utils.Optional<EstoqueCountAggregateOutputType> | number
          }
        }
      }
      EstoqueItem: {
        payload: Prisma.$EstoqueItemPayload<ExtArgs>
        fields: Prisma.EstoqueItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstoqueItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstoqueItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>
          }
          findFirst: {
            args: Prisma.EstoqueItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstoqueItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>
          }
          findMany: {
            args: Prisma.EstoqueItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>[]
          }
          create: {
            args: Prisma.EstoqueItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>
          }
          createMany: {
            args: Prisma.EstoqueItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EstoqueItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>[]
          }
          delete: {
            args: Prisma.EstoqueItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>
          }
          update: {
            args: Prisma.EstoqueItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>
          }
          deleteMany: {
            args: Prisma.EstoqueItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstoqueItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EstoqueItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>[]
          }
          upsert: {
            args: Prisma.EstoqueItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstoqueItemPayload>
          }
          aggregate: {
            args: Prisma.EstoqueItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstoqueItem>
          }
          groupBy: {
            args: Prisma.EstoqueItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstoqueItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstoqueItemCountArgs<ExtArgs>
            result: $Utils.Optional<EstoqueItemCountAggregateOutputType> | number
          }
        }
      }
      Transferencia: {
        payload: Prisma.$TransferenciaPayload<ExtArgs>
        fields: Prisma.TransferenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransferenciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransferenciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>
          }
          findFirst: {
            args: Prisma.TransferenciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransferenciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>
          }
          findMany: {
            args: Prisma.TransferenciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>[]
          }
          create: {
            args: Prisma.TransferenciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>
          }
          createMany: {
            args: Prisma.TransferenciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransferenciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>[]
          }
          delete: {
            args: Prisma.TransferenciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>
          }
          update: {
            args: Prisma.TransferenciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>
          }
          deleteMany: {
            args: Prisma.TransferenciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransferenciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransferenciaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>[]
          }
          upsert: {
            args: Prisma.TransferenciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransferenciaPayload>
          }
          aggregate: {
            args: Prisma.TransferenciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransferencia>
          }
          groupBy: {
            args: Prisma.TransferenciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransferenciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransferenciaCountArgs<ExtArgs>
            result: $Utils.Optional<TransferenciaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    equipamento?: EquipamentoOmit
    estoque?: EstoqueOmit
    estoqueItem?: EstoqueItemOmit
    transferencia?: TransferenciaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EquipamentoCountOutputType
   */

  export type EquipamentoCountOutputType = {
    transferencias: number
    estoqueItens: number
  }

  export type EquipamentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transferencias?: boolean | EquipamentoCountOutputTypeCountTransferenciasArgs
    estoqueItens?: boolean | EquipamentoCountOutputTypeCountEstoqueItensArgs
  }

  // Custom InputTypes
  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipamentoCountOutputType
     */
    select?: EquipamentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountTransferenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransferenciaWhereInput
  }

  /**
   * EquipamentoCountOutputType without action
   */
  export type EquipamentoCountOutputTypeCountEstoqueItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstoqueItemWhereInput
  }


  /**
   * Count Type EstoqueCountOutputType
   */

  export type EstoqueCountOutputType = {
    transferenciasDestino: number
    transferenciasOrigem: number
    estoqueItens: number
  }

  export type EstoqueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transferenciasDestino?: boolean | EstoqueCountOutputTypeCountTransferenciasDestinoArgs
    transferenciasOrigem?: boolean | EstoqueCountOutputTypeCountTransferenciasOrigemArgs
    estoqueItens?: boolean | EstoqueCountOutputTypeCountEstoqueItensArgs
  }

  // Custom InputTypes
  /**
   * EstoqueCountOutputType without action
   */
  export type EstoqueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueCountOutputType
     */
    select?: EstoqueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EstoqueCountOutputType without action
   */
  export type EstoqueCountOutputTypeCountTransferenciasDestinoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransferenciaWhereInput
  }

  /**
   * EstoqueCountOutputType without action
   */
  export type EstoqueCountOutputTypeCountTransferenciasOrigemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransferenciaWhereInput
  }

  /**
   * EstoqueCountOutputType without action
   */
  export type EstoqueCountOutputTypeCountEstoqueItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstoqueItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    matricula: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    matricula: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    matricula: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    matricula: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    matricula: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    matricula?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    matricula?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    matricula?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    matricula?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    matricula?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    matricula: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    matricula?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    matricula?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    matricula?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    matricula?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "matricula", ExtArgs["result"]["usuario"]>

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      matricula: number
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly matricula: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
  }


  /**
   * Model Equipamento
   */

  export type AggregateEquipamento = {
    _count: EquipamentoCountAggregateOutputType | null
    _avg: EquipamentoAvgAggregateOutputType | null
    _sum: EquipamentoSumAggregateOutputType | null
    _min: EquipamentoMinAggregateOutputType | null
    _max: EquipamentoMaxAggregateOutputType | null
  }

  export type EquipamentoAvgAggregateOutputType = {
    id: number | null
    quantidade: number | null
  }

  export type EquipamentoSumAggregateOutputType = {
    id: number | null
    quantidade: number | null
  }

  export type EquipamentoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    quantidade: number | null
    data: Date | null
  }

  export type EquipamentoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    quantidade: number | null
    data: Date | null
  }

  export type EquipamentoCountAggregateOutputType = {
    id: number
    nome: number
    quantidade: number
    data: number
    _all: number
  }


  export type EquipamentoAvgAggregateInputType = {
    id?: true
    quantidade?: true
  }

  export type EquipamentoSumAggregateInputType = {
    id?: true
    quantidade?: true
  }

  export type EquipamentoMinAggregateInputType = {
    id?: true
    nome?: true
    quantidade?: true
    data?: true
  }

  export type EquipamentoMaxAggregateInputType = {
    id?: true
    nome?: true
    quantidade?: true
    data?: true
  }

  export type EquipamentoCountAggregateInputType = {
    id?: true
    nome?: true
    quantidade?: true
    data?: true
    _all?: true
  }

  export type EquipamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipamento to aggregate.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipamentos
    **/
    _count?: true | EquipamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquipamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquipamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipamentoMaxAggregateInputType
  }

  export type GetEquipamentoAggregateType<T extends EquipamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipamento[P]>
      : GetScalarType<T[P], AggregateEquipamento[P]>
  }




  export type EquipamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipamentoWhereInput
    orderBy?: EquipamentoOrderByWithAggregationInput | EquipamentoOrderByWithAggregationInput[]
    by: EquipamentoScalarFieldEnum[] | EquipamentoScalarFieldEnum
    having?: EquipamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipamentoCountAggregateInputType | true
    _avg?: EquipamentoAvgAggregateInputType
    _sum?: EquipamentoSumAggregateInputType
    _min?: EquipamentoMinAggregateInputType
    _max?: EquipamentoMaxAggregateInputType
  }

  export type EquipamentoGroupByOutputType = {
    id: number
    nome: string
    quantidade: number
    data: Date
    _count: EquipamentoCountAggregateOutputType | null
    _avg: EquipamentoAvgAggregateOutputType | null
    _sum: EquipamentoSumAggregateOutputType | null
    _min: EquipamentoMinAggregateOutputType | null
    _max: EquipamentoMaxAggregateOutputType | null
  }

  type GetEquipamentoGroupByPayload<T extends EquipamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipamentoGroupByOutputType[P]>
            : GetScalarType<T[P], EquipamentoGroupByOutputType[P]>
        }
      >
    >


  export type EquipamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    quantidade?: boolean
    data?: boolean
    transferencias?: boolean | Equipamento$transferenciasArgs<ExtArgs>
    estoqueItens?: boolean | Equipamento$estoqueItensArgs<ExtArgs>
    _count?: boolean | EquipamentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipamento"]>

  export type EquipamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    quantidade?: boolean
    data?: boolean
  }, ExtArgs["result"]["equipamento"]>

  export type EquipamentoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    quantidade?: boolean
    data?: boolean
  }, ExtArgs["result"]["equipamento"]>

  export type EquipamentoSelectScalar = {
    id?: boolean
    nome?: boolean
    quantidade?: boolean
    data?: boolean
  }

  export type EquipamentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "quantidade" | "data", ExtArgs["result"]["equipamento"]>
  export type EquipamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transferencias?: boolean | Equipamento$transferenciasArgs<ExtArgs>
    estoqueItens?: boolean | Equipamento$estoqueItensArgs<ExtArgs>
    _count?: boolean | EquipamentoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipamentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipamentoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipamento"
    objects: {
      transferencias: Prisma.$TransferenciaPayload<ExtArgs>[]
      estoqueItens: Prisma.$EstoqueItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      quantidade: number
      data: Date
    }, ExtArgs["result"]["equipamento"]>
    composites: {}
  }

  type EquipamentoGetPayload<S extends boolean | null | undefined | EquipamentoDefaultArgs> = $Result.GetResult<Prisma.$EquipamentoPayload, S>

  type EquipamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipamentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipamentoCountAggregateInputType | true
    }

  export interface EquipamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipamento'], meta: { name: 'Equipamento' } }
    /**
     * Find zero or one Equipamento that matches the filter.
     * @param {EquipamentoFindUniqueArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipamentoFindUniqueArgs>(args: SelectSubset<T, EquipamentoFindUniqueArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Equipamento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipamentoFindUniqueOrThrowArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoFindFirstArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipamentoFindFirstArgs>(args?: SelectSubset<T, EquipamentoFindFirstArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoFindFirstOrThrowArgs} args - Arguments to find a Equipamento
     * @example
     * // Get one Equipamento
     * const equipamento = await prisma.equipamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Equipamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipamentos
     * const equipamentos = await prisma.equipamento.findMany()
     * 
     * // Get first 10 Equipamentos
     * const equipamentos = await prisma.equipamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipamentoWithIdOnly = await prisma.equipamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipamentoFindManyArgs>(args?: SelectSubset<T, EquipamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Equipamento.
     * @param {EquipamentoCreateArgs} args - Arguments to create a Equipamento.
     * @example
     * // Create one Equipamento
     * const Equipamento = await prisma.equipamento.create({
     *   data: {
     *     // ... data to create a Equipamento
     *   }
     * })
     * 
     */
    create<T extends EquipamentoCreateArgs>(args: SelectSubset<T, EquipamentoCreateArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Equipamentos.
     * @param {EquipamentoCreateManyArgs} args - Arguments to create many Equipamentos.
     * @example
     * // Create many Equipamentos
     * const equipamento = await prisma.equipamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipamentoCreateManyArgs>(args?: SelectSubset<T, EquipamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipamentos and returns the data saved in the database.
     * @param {EquipamentoCreateManyAndReturnArgs} args - Arguments to create many Equipamentos.
     * @example
     * // Create many Equipamentos
     * const equipamento = await prisma.equipamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipamentos and only return the `id`
     * const equipamentoWithIdOnly = await prisma.equipamento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Equipamento.
     * @param {EquipamentoDeleteArgs} args - Arguments to delete one Equipamento.
     * @example
     * // Delete one Equipamento
     * const Equipamento = await prisma.equipamento.delete({
     *   where: {
     *     // ... filter to delete one Equipamento
     *   }
     * })
     * 
     */
    delete<T extends EquipamentoDeleteArgs>(args: SelectSubset<T, EquipamentoDeleteArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Equipamento.
     * @param {EquipamentoUpdateArgs} args - Arguments to update one Equipamento.
     * @example
     * // Update one Equipamento
     * const equipamento = await prisma.equipamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipamentoUpdateArgs>(args: SelectSubset<T, EquipamentoUpdateArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Equipamentos.
     * @param {EquipamentoDeleteManyArgs} args - Arguments to filter Equipamentos to delete.
     * @example
     * // Delete a few Equipamentos
     * const { count } = await prisma.equipamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipamentoDeleteManyArgs>(args?: SelectSubset<T, EquipamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipamentos
     * const equipamento = await prisma.equipamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipamentoUpdateManyArgs>(args: SelectSubset<T, EquipamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipamentos and returns the data updated in the database.
     * @param {EquipamentoUpdateManyAndReturnArgs} args - Arguments to update many Equipamentos.
     * @example
     * // Update many Equipamentos
     * const equipamento = await prisma.equipamento.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipamentos and only return the `id`
     * const equipamentoWithIdOnly = await prisma.equipamento.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipamentoUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipamentoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Equipamento.
     * @param {EquipamentoUpsertArgs} args - Arguments to update or create a Equipamento.
     * @example
     * // Update or create a Equipamento
     * const equipamento = await prisma.equipamento.upsert({
     *   create: {
     *     // ... data to create a Equipamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipamento we want to update
     *   }
     * })
     */
    upsert<T extends EquipamentoUpsertArgs>(args: SelectSubset<T, EquipamentoUpsertArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Equipamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoCountArgs} args - Arguments to filter Equipamentos to count.
     * @example
     * // Count the number of Equipamentos
     * const count = await prisma.equipamento.count({
     *   where: {
     *     // ... the filter for the Equipamentos we want to count
     *   }
     * })
    **/
    count<T extends EquipamentoCountArgs>(
      args?: Subset<T, EquipamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipamentoAggregateArgs>(args: Subset<T, EquipamentoAggregateArgs>): Prisma.PrismaPromise<GetEquipamentoAggregateType<T>>

    /**
     * Group by Equipamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipamentoGroupByArgs['orderBy'] }
        : { orderBy?: EquipamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipamento model
   */
  readonly fields: EquipamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transferencias<T extends Equipamento$transferenciasArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$transferenciasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    estoqueItens<T extends Equipamento$estoqueItensArgs<ExtArgs> = {}>(args?: Subset<T, Equipamento$estoqueItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Equipamento model
   */
  interface EquipamentoFieldRefs {
    readonly id: FieldRef<"Equipamento", 'Int'>
    readonly nome: FieldRef<"Equipamento", 'String'>
    readonly quantidade: FieldRef<"Equipamento", 'Int'>
    readonly data: FieldRef<"Equipamento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Equipamento findUnique
   */
  export type EquipamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento findUniqueOrThrow
   */
  export type EquipamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento findFirst
   */
  export type EquipamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipamentos.
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipamentos.
     */
    distinct?: EquipamentoScalarFieldEnum | EquipamentoScalarFieldEnum[]
  }

  /**
   * Equipamento findFirstOrThrow
   */
  export type EquipamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamento to fetch.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipamentos.
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipamentos.
     */
    distinct?: EquipamentoScalarFieldEnum | EquipamentoScalarFieldEnum[]
  }

  /**
   * Equipamento findMany
   */
  export type EquipamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter, which Equipamentos to fetch.
     */
    where?: EquipamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipamentos to fetch.
     */
    orderBy?: EquipamentoOrderByWithRelationInput | EquipamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipamentos.
     */
    cursor?: EquipamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipamentos.
     */
    skip?: number
    distinct?: EquipamentoScalarFieldEnum | EquipamentoScalarFieldEnum[]
  }

  /**
   * Equipamento create
   */
  export type EquipamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipamento.
     */
    data: XOR<EquipamentoCreateInput, EquipamentoUncheckedCreateInput>
  }

  /**
   * Equipamento createMany
   */
  export type EquipamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipamentos.
     */
    data: EquipamentoCreateManyInput | EquipamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipamento createManyAndReturn
   */
  export type EquipamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * The data used to create many Equipamentos.
     */
    data: EquipamentoCreateManyInput | EquipamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipamento update
   */
  export type EquipamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipamento.
     */
    data: XOR<EquipamentoUpdateInput, EquipamentoUncheckedUpdateInput>
    /**
     * Choose, which Equipamento to update.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento updateMany
   */
  export type EquipamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipamentos.
     */
    data: XOR<EquipamentoUpdateManyMutationInput, EquipamentoUncheckedUpdateManyInput>
    /**
     * Filter which Equipamentos to update
     */
    where?: EquipamentoWhereInput
    /**
     * Limit how many Equipamentos to update.
     */
    limit?: number
  }

  /**
   * Equipamento updateManyAndReturn
   */
  export type EquipamentoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * The data used to update Equipamentos.
     */
    data: XOR<EquipamentoUpdateManyMutationInput, EquipamentoUncheckedUpdateManyInput>
    /**
     * Filter which Equipamentos to update
     */
    where?: EquipamentoWhereInput
    /**
     * Limit how many Equipamentos to update.
     */
    limit?: number
  }

  /**
   * Equipamento upsert
   */
  export type EquipamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipamento to update in case it exists.
     */
    where: EquipamentoWhereUniqueInput
    /**
     * In case the Equipamento found by the `where` argument doesn't exist, create a new Equipamento with this data.
     */
    create: XOR<EquipamentoCreateInput, EquipamentoUncheckedCreateInput>
    /**
     * In case the Equipamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipamentoUpdateInput, EquipamentoUncheckedUpdateInput>
  }

  /**
   * Equipamento delete
   */
  export type EquipamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
    /**
     * Filter which Equipamento to delete.
     */
    where: EquipamentoWhereUniqueInput
  }

  /**
   * Equipamento deleteMany
   */
  export type EquipamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipamentos to delete
     */
    where?: EquipamentoWhereInput
    /**
     * Limit how many Equipamentos to delete.
     */
    limit?: number
  }

  /**
   * Equipamento.transferencias
   */
  export type Equipamento$transferenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    where?: TransferenciaWhereInput
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    cursor?: TransferenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransferenciaScalarFieldEnum | TransferenciaScalarFieldEnum[]
  }

  /**
   * Equipamento.estoqueItens
   */
  export type Equipamento$estoqueItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    where?: EstoqueItemWhereInput
    orderBy?: EstoqueItemOrderByWithRelationInput | EstoqueItemOrderByWithRelationInput[]
    cursor?: EstoqueItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EstoqueItemScalarFieldEnum | EstoqueItemScalarFieldEnum[]
  }

  /**
   * Equipamento without action
   */
  export type EquipamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipamento
     */
    select?: EquipamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipamento
     */
    omit?: EquipamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipamentoInclude<ExtArgs> | null
  }


  /**
   * Model Estoque
   */

  export type AggregateEstoque = {
    _count: EstoqueCountAggregateOutputType | null
    _avg: EstoqueAvgAggregateOutputType | null
    _sum: EstoqueSumAggregateOutputType | null
    _min: EstoqueMinAggregateOutputType | null
    _max: EstoqueMaxAggregateOutputType | null
  }

  export type EstoqueAvgAggregateOutputType = {
    id: number | null
  }

  export type EstoqueSumAggregateOutputType = {
    id: number | null
  }

  export type EstoqueMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type EstoqueMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type EstoqueCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type EstoqueAvgAggregateInputType = {
    id?: true
  }

  export type EstoqueSumAggregateInputType = {
    id?: true
  }

  export type EstoqueMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type EstoqueMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type EstoqueCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type EstoqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estoque to aggregate.
     */
    where?: EstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoques to fetch.
     */
    orderBy?: EstoqueOrderByWithRelationInput | EstoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estoques
    **/
    _count?: true | EstoqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstoqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstoqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstoqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstoqueMaxAggregateInputType
  }

  export type GetEstoqueAggregateType<T extends EstoqueAggregateArgs> = {
        [P in keyof T & keyof AggregateEstoque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstoque[P]>
      : GetScalarType<T[P], AggregateEstoque[P]>
  }




  export type EstoqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstoqueWhereInput
    orderBy?: EstoqueOrderByWithAggregationInput | EstoqueOrderByWithAggregationInput[]
    by: EstoqueScalarFieldEnum[] | EstoqueScalarFieldEnum
    having?: EstoqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstoqueCountAggregateInputType | true
    _avg?: EstoqueAvgAggregateInputType
    _sum?: EstoqueSumAggregateInputType
    _min?: EstoqueMinAggregateInputType
    _max?: EstoqueMaxAggregateInputType
  }

  export type EstoqueGroupByOutputType = {
    id: number
    nome: string
    _count: EstoqueCountAggregateOutputType | null
    _avg: EstoqueAvgAggregateOutputType | null
    _sum: EstoqueSumAggregateOutputType | null
    _min: EstoqueMinAggregateOutputType | null
    _max: EstoqueMaxAggregateOutputType | null
  }

  type GetEstoqueGroupByPayload<T extends EstoqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstoqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstoqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstoqueGroupByOutputType[P]>
            : GetScalarType<T[P], EstoqueGroupByOutputType[P]>
        }
      >
    >


  export type EstoqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    transferenciasDestino?: boolean | Estoque$transferenciasDestinoArgs<ExtArgs>
    transferenciasOrigem?: boolean | Estoque$transferenciasOrigemArgs<ExtArgs>
    estoqueItens?: boolean | Estoque$estoqueItensArgs<ExtArgs>
    _count?: boolean | EstoqueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estoque"]>

  export type EstoqueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["estoque"]>

  export type EstoqueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["estoque"]>

  export type EstoqueSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type EstoqueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["estoque"]>
  export type EstoqueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transferenciasDestino?: boolean | Estoque$transferenciasDestinoArgs<ExtArgs>
    transferenciasOrigem?: boolean | Estoque$transferenciasOrigemArgs<ExtArgs>
    estoqueItens?: boolean | Estoque$estoqueItensArgs<ExtArgs>
    _count?: boolean | EstoqueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EstoqueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EstoqueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EstoquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estoque"
    objects: {
      transferenciasDestino: Prisma.$TransferenciaPayload<ExtArgs>[]
      transferenciasOrigem: Prisma.$TransferenciaPayload<ExtArgs>[]
      estoqueItens: Prisma.$EstoqueItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["estoque"]>
    composites: {}
  }

  type EstoqueGetPayload<S extends boolean | null | undefined | EstoqueDefaultArgs> = $Result.GetResult<Prisma.$EstoquePayload, S>

  type EstoqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EstoqueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EstoqueCountAggregateInputType | true
    }

  export interface EstoqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estoque'], meta: { name: 'Estoque' } }
    /**
     * Find zero or one Estoque that matches the filter.
     * @param {EstoqueFindUniqueArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstoqueFindUniqueArgs>(args: SelectSubset<T, EstoqueFindUniqueArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Estoque that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EstoqueFindUniqueOrThrowArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstoqueFindUniqueOrThrowArgs>(args: SelectSubset<T, EstoqueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estoque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueFindFirstArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstoqueFindFirstArgs>(args?: SelectSubset<T, EstoqueFindFirstArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estoque that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueFindFirstOrThrowArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstoqueFindFirstOrThrowArgs>(args?: SelectSubset<T, EstoqueFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Estoques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estoques
     * const estoques = await prisma.estoque.findMany()
     * 
     * // Get first 10 Estoques
     * const estoques = await prisma.estoque.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estoqueWithIdOnly = await prisma.estoque.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstoqueFindManyArgs>(args?: SelectSubset<T, EstoqueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Estoque.
     * @param {EstoqueCreateArgs} args - Arguments to create a Estoque.
     * @example
     * // Create one Estoque
     * const Estoque = await prisma.estoque.create({
     *   data: {
     *     // ... data to create a Estoque
     *   }
     * })
     * 
     */
    create<T extends EstoqueCreateArgs>(args: SelectSubset<T, EstoqueCreateArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Estoques.
     * @param {EstoqueCreateManyArgs} args - Arguments to create many Estoques.
     * @example
     * // Create many Estoques
     * const estoque = await prisma.estoque.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstoqueCreateManyArgs>(args?: SelectSubset<T, EstoqueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Estoques and returns the data saved in the database.
     * @param {EstoqueCreateManyAndReturnArgs} args - Arguments to create many Estoques.
     * @example
     * // Create many Estoques
     * const estoque = await prisma.estoque.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Estoques and only return the `id`
     * const estoqueWithIdOnly = await prisma.estoque.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EstoqueCreateManyAndReturnArgs>(args?: SelectSubset<T, EstoqueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Estoque.
     * @param {EstoqueDeleteArgs} args - Arguments to delete one Estoque.
     * @example
     * // Delete one Estoque
     * const Estoque = await prisma.estoque.delete({
     *   where: {
     *     // ... filter to delete one Estoque
     *   }
     * })
     * 
     */
    delete<T extends EstoqueDeleteArgs>(args: SelectSubset<T, EstoqueDeleteArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Estoque.
     * @param {EstoqueUpdateArgs} args - Arguments to update one Estoque.
     * @example
     * // Update one Estoque
     * const estoque = await prisma.estoque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstoqueUpdateArgs>(args: SelectSubset<T, EstoqueUpdateArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Estoques.
     * @param {EstoqueDeleteManyArgs} args - Arguments to filter Estoques to delete.
     * @example
     * // Delete a few Estoques
     * const { count } = await prisma.estoque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstoqueDeleteManyArgs>(args?: SelectSubset<T, EstoqueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estoques
     * const estoque = await prisma.estoque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstoqueUpdateManyArgs>(args: SelectSubset<T, EstoqueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estoques and returns the data updated in the database.
     * @param {EstoqueUpdateManyAndReturnArgs} args - Arguments to update many Estoques.
     * @example
     * // Update many Estoques
     * const estoque = await prisma.estoque.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Estoques and only return the `id`
     * const estoqueWithIdOnly = await prisma.estoque.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EstoqueUpdateManyAndReturnArgs>(args: SelectSubset<T, EstoqueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Estoque.
     * @param {EstoqueUpsertArgs} args - Arguments to update or create a Estoque.
     * @example
     * // Update or create a Estoque
     * const estoque = await prisma.estoque.upsert({
     *   create: {
     *     // ... data to create a Estoque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estoque we want to update
     *   }
     * })
     */
    upsert<T extends EstoqueUpsertArgs>(args: SelectSubset<T, EstoqueUpsertArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Estoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueCountArgs} args - Arguments to filter Estoques to count.
     * @example
     * // Count the number of Estoques
     * const count = await prisma.estoque.count({
     *   where: {
     *     // ... the filter for the Estoques we want to count
     *   }
     * })
    **/
    count<T extends EstoqueCountArgs>(
      args?: Subset<T, EstoqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstoqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstoqueAggregateArgs>(args: Subset<T, EstoqueAggregateArgs>): Prisma.PrismaPromise<GetEstoqueAggregateType<T>>

    /**
     * Group by Estoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstoqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstoqueGroupByArgs['orderBy'] }
        : { orderBy?: EstoqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstoqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstoqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estoque model
   */
  readonly fields: EstoqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estoque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstoqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transferenciasDestino<T extends Estoque$transferenciasDestinoArgs<ExtArgs> = {}>(args?: Subset<T, Estoque$transferenciasDestinoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transferenciasOrigem<T extends Estoque$transferenciasOrigemArgs<ExtArgs> = {}>(args?: Subset<T, Estoque$transferenciasOrigemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    estoqueItens<T extends Estoque$estoqueItensArgs<ExtArgs> = {}>(args?: Subset<T, Estoque$estoqueItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Estoque model
   */
  interface EstoqueFieldRefs {
    readonly id: FieldRef<"Estoque", 'Int'>
    readonly nome: FieldRef<"Estoque", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Estoque findUnique
   */
  export type EstoqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * Filter, which Estoque to fetch.
     */
    where: EstoqueWhereUniqueInput
  }

  /**
   * Estoque findUniqueOrThrow
   */
  export type EstoqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * Filter, which Estoque to fetch.
     */
    where: EstoqueWhereUniqueInput
  }

  /**
   * Estoque findFirst
   */
  export type EstoqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * Filter, which Estoque to fetch.
     */
    where?: EstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoques to fetch.
     */
    orderBy?: EstoqueOrderByWithRelationInput | EstoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estoques.
     */
    cursor?: EstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estoques.
     */
    distinct?: EstoqueScalarFieldEnum | EstoqueScalarFieldEnum[]
  }

  /**
   * Estoque findFirstOrThrow
   */
  export type EstoqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * Filter, which Estoque to fetch.
     */
    where?: EstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoques to fetch.
     */
    orderBy?: EstoqueOrderByWithRelationInput | EstoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estoques.
     */
    cursor?: EstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estoques.
     */
    distinct?: EstoqueScalarFieldEnum | EstoqueScalarFieldEnum[]
  }

  /**
   * Estoque findMany
   */
  export type EstoqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * Filter, which Estoques to fetch.
     */
    where?: EstoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoques to fetch.
     */
    orderBy?: EstoqueOrderByWithRelationInput | EstoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estoques.
     */
    cursor?: EstoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoques.
     */
    skip?: number
    distinct?: EstoqueScalarFieldEnum | EstoqueScalarFieldEnum[]
  }

  /**
   * Estoque create
   */
  export type EstoqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * The data needed to create a Estoque.
     */
    data: XOR<EstoqueCreateInput, EstoqueUncheckedCreateInput>
  }

  /**
   * Estoque createMany
   */
  export type EstoqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estoques.
     */
    data: EstoqueCreateManyInput | EstoqueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estoque createManyAndReturn
   */
  export type EstoqueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * The data used to create many Estoques.
     */
    data: EstoqueCreateManyInput | EstoqueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estoque update
   */
  export type EstoqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * The data needed to update a Estoque.
     */
    data: XOR<EstoqueUpdateInput, EstoqueUncheckedUpdateInput>
    /**
     * Choose, which Estoque to update.
     */
    where: EstoqueWhereUniqueInput
  }

  /**
   * Estoque updateMany
   */
  export type EstoqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estoques.
     */
    data: XOR<EstoqueUpdateManyMutationInput, EstoqueUncheckedUpdateManyInput>
    /**
     * Filter which Estoques to update
     */
    where?: EstoqueWhereInput
    /**
     * Limit how many Estoques to update.
     */
    limit?: number
  }

  /**
   * Estoque updateManyAndReturn
   */
  export type EstoqueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * The data used to update Estoques.
     */
    data: XOR<EstoqueUpdateManyMutationInput, EstoqueUncheckedUpdateManyInput>
    /**
     * Filter which Estoques to update
     */
    where?: EstoqueWhereInput
    /**
     * Limit how many Estoques to update.
     */
    limit?: number
  }

  /**
   * Estoque upsert
   */
  export type EstoqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * The filter to search for the Estoque to update in case it exists.
     */
    where: EstoqueWhereUniqueInput
    /**
     * In case the Estoque found by the `where` argument doesn't exist, create a new Estoque with this data.
     */
    create: XOR<EstoqueCreateInput, EstoqueUncheckedCreateInput>
    /**
     * In case the Estoque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstoqueUpdateInput, EstoqueUncheckedUpdateInput>
  }

  /**
   * Estoque delete
   */
  export type EstoqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
    /**
     * Filter which Estoque to delete.
     */
    where: EstoqueWhereUniqueInput
  }

  /**
   * Estoque deleteMany
   */
  export type EstoqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estoques to delete
     */
    where?: EstoqueWhereInput
    /**
     * Limit how many Estoques to delete.
     */
    limit?: number
  }

  /**
   * Estoque.transferenciasDestino
   */
  export type Estoque$transferenciasDestinoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    where?: TransferenciaWhereInput
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    cursor?: TransferenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransferenciaScalarFieldEnum | TransferenciaScalarFieldEnum[]
  }

  /**
   * Estoque.transferenciasOrigem
   */
  export type Estoque$transferenciasOrigemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    where?: TransferenciaWhereInput
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    cursor?: TransferenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransferenciaScalarFieldEnum | TransferenciaScalarFieldEnum[]
  }

  /**
   * Estoque.estoqueItens
   */
  export type Estoque$estoqueItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    where?: EstoqueItemWhereInput
    orderBy?: EstoqueItemOrderByWithRelationInput | EstoqueItemOrderByWithRelationInput[]
    cursor?: EstoqueItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EstoqueItemScalarFieldEnum | EstoqueItemScalarFieldEnum[]
  }

  /**
   * Estoque without action
   */
  export type EstoqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque
     */
    select?: EstoqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estoque
     */
    omit?: EstoqueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueInclude<ExtArgs> | null
  }


  /**
   * Model EstoqueItem
   */

  export type AggregateEstoqueItem = {
    _count: EstoqueItemCountAggregateOutputType | null
    _avg: EstoqueItemAvgAggregateOutputType | null
    _sum: EstoqueItemSumAggregateOutputType | null
    _min: EstoqueItemMinAggregateOutputType | null
    _max: EstoqueItemMaxAggregateOutputType | null
  }

  export type EstoqueItemAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueId: number | null
    quantidade: number | null
  }

  export type EstoqueItemSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueId: number | null
    quantidade: number | null
  }

  export type EstoqueItemMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueId: number | null
    quantidade: number | null
  }

  export type EstoqueItemMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueId: number | null
    quantidade: number | null
  }

  export type EstoqueItemCountAggregateOutputType = {
    id: number
    itemId: number
    estoqueId: number
    quantidade: number
    _all: number
  }


  export type EstoqueItemAvgAggregateInputType = {
    id?: true
    itemId?: true
    estoqueId?: true
    quantidade?: true
  }

  export type EstoqueItemSumAggregateInputType = {
    id?: true
    itemId?: true
    estoqueId?: true
    quantidade?: true
  }

  export type EstoqueItemMinAggregateInputType = {
    id?: true
    itemId?: true
    estoqueId?: true
    quantidade?: true
  }

  export type EstoqueItemMaxAggregateInputType = {
    id?: true
    itemId?: true
    estoqueId?: true
    quantidade?: true
  }

  export type EstoqueItemCountAggregateInputType = {
    id?: true
    itemId?: true
    estoqueId?: true
    quantidade?: true
    _all?: true
  }

  export type EstoqueItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EstoqueItem to aggregate.
     */
    where?: EstoqueItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstoqueItems to fetch.
     */
    orderBy?: EstoqueItemOrderByWithRelationInput | EstoqueItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstoqueItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstoqueItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstoqueItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EstoqueItems
    **/
    _count?: true | EstoqueItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstoqueItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstoqueItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstoqueItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstoqueItemMaxAggregateInputType
  }

  export type GetEstoqueItemAggregateType<T extends EstoqueItemAggregateArgs> = {
        [P in keyof T & keyof AggregateEstoqueItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstoqueItem[P]>
      : GetScalarType<T[P], AggregateEstoqueItem[P]>
  }




  export type EstoqueItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstoqueItemWhereInput
    orderBy?: EstoqueItemOrderByWithAggregationInput | EstoqueItemOrderByWithAggregationInput[]
    by: EstoqueItemScalarFieldEnum[] | EstoqueItemScalarFieldEnum
    having?: EstoqueItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstoqueItemCountAggregateInputType | true
    _avg?: EstoqueItemAvgAggregateInputType
    _sum?: EstoqueItemSumAggregateInputType
    _min?: EstoqueItemMinAggregateInputType
    _max?: EstoqueItemMaxAggregateInputType
  }

  export type EstoqueItemGroupByOutputType = {
    id: number
    itemId: number
    estoqueId: number
    quantidade: number
    _count: EstoqueItemCountAggregateOutputType | null
    _avg: EstoqueItemAvgAggregateOutputType | null
    _sum: EstoqueItemSumAggregateOutputType | null
    _min: EstoqueItemMinAggregateOutputType | null
    _max: EstoqueItemMaxAggregateOutputType | null
  }

  type GetEstoqueItemGroupByPayload<T extends EstoqueItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstoqueItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstoqueItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstoqueItemGroupByOutputType[P]>
            : GetScalarType<T[P], EstoqueItemGroupByOutputType[P]>
        }
      >
    >


  export type EstoqueItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    estoqueId?: boolean
    quantidade?: boolean
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    estoque?: boolean | EstoqueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estoqueItem"]>

  export type EstoqueItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    estoqueId?: boolean
    quantidade?: boolean
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    estoque?: boolean | EstoqueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estoqueItem"]>

  export type EstoqueItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    estoqueId?: boolean
    quantidade?: boolean
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    estoque?: boolean | EstoqueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estoqueItem"]>

  export type EstoqueItemSelectScalar = {
    id?: boolean
    itemId?: boolean
    estoqueId?: boolean
    quantidade?: boolean
  }

  export type EstoqueItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemId" | "estoqueId" | "quantidade", ExtArgs["result"]["estoqueItem"]>
  export type EstoqueItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    estoque?: boolean | EstoqueDefaultArgs<ExtArgs>
  }
  export type EstoqueItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    estoque?: boolean | EstoqueDefaultArgs<ExtArgs>
  }
  export type EstoqueItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    estoque?: boolean | EstoqueDefaultArgs<ExtArgs>
  }

  export type $EstoqueItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EstoqueItem"
    objects: {
      item: Prisma.$EquipamentoPayload<ExtArgs>
      estoque: Prisma.$EstoquePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      estoqueId: number
      quantidade: number
    }, ExtArgs["result"]["estoqueItem"]>
    composites: {}
  }

  type EstoqueItemGetPayload<S extends boolean | null | undefined | EstoqueItemDefaultArgs> = $Result.GetResult<Prisma.$EstoqueItemPayload, S>

  type EstoqueItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EstoqueItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EstoqueItemCountAggregateInputType | true
    }

  export interface EstoqueItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EstoqueItem'], meta: { name: 'EstoqueItem' } }
    /**
     * Find zero or one EstoqueItem that matches the filter.
     * @param {EstoqueItemFindUniqueArgs} args - Arguments to find a EstoqueItem
     * @example
     * // Get one EstoqueItem
     * const estoqueItem = await prisma.estoqueItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstoqueItemFindUniqueArgs>(args: SelectSubset<T, EstoqueItemFindUniqueArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EstoqueItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EstoqueItemFindUniqueOrThrowArgs} args - Arguments to find a EstoqueItem
     * @example
     * // Get one EstoqueItem
     * const estoqueItem = await prisma.estoqueItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstoqueItemFindUniqueOrThrowArgs>(args: SelectSubset<T, EstoqueItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EstoqueItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemFindFirstArgs} args - Arguments to find a EstoqueItem
     * @example
     * // Get one EstoqueItem
     * const estoqueItem = await prisma.estoqueItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstoqueItemFindFirstArgs>(args?: SelectSubset<T, EstoqueItemFindFirstArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EstoqueItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemFindFirstOrThrowArgs} args - Arguments to find a EstoqueItem
     * @example
     * // Get one EstoqueItem
     * const estoqueItem = await prisma.estoqueItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstoqueItemFindFirstOrThrowArgs>(args?: SelectSubset<T, EstoqueItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EstoqueItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EstoqueItems
     * const estoqueItems = await prisma.estoqueItem.findMany()
     * 
     * // Get first 10 EstoqueItems
     * const estoqueItems = await prisma.estoqueItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estoqueItemWithIdOnly = await prisma.estoqueItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstoqueItemFindManyArgs>(args?: SelectSubset<T, EstoqueItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EstoqueItem.
     * @param {EstoqueItemCreateArgs} args - Arguments to create a EstoqueItem.
     * @example
     * // Create one EstoqueItem
     * const EstoqueItem = await prisma.estoqueItem.create({
     *   data: {
     *     // ... data to create a EstoqueItem
     *   }
     * })
     * 
     */
    create<T extends EstoqueItemCreateArgs>(args: SelectSubset<T, EstoqueItemCreateArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EstoqueItems.
     * @param {EstoqueItemCreateManyArgs} args - Arguments to create many EstoqueItems.
     * @example
     * // Create many EstoqueItems
     * const estoqueItem = await prisma.estoqueItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstoqueItemCreateManyArgs>(args?: SelectSubset<T, EstoqueItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EstoqueItems and returns the data saved in the database.
     * @param {EstoqueItemCreateManyAndReturnArgs} args - Arguments to create many EstoqueItems.
     * @example
     * // Create many EstoqueItems
     * const estoqueItem = await prisma.estoqueItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EstoqueItems and only return the `id`
     * const estoqueItemWithIdOnly = await prisma.estoqueItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EstoqueItemCreateManyAndReturnArgs>(args?: SelectSubset<T, EstoqueItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EstoqueItem.
     * @param {EstoqueItemDeleteArgs} args - Arguments to delete one EstoqueItem.
     * @example
     * // Delete one EstoqueItem
     * const EstoqueItem = await prisma.estoqueItem.delete({
     *   where: {
     *     // ... filter to delete one EstoqueItem
     *   }
     * })
     * 
     */
    delete<T extends EstoqueItemDeleteArgs>(args: SelectSubset<T, EstoqueItemDeleteArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EstoqueItem.
     * @param {EstoqueItemUpdateArgs} args - Arguments to update one EstoqueItem.
     * @example
     * // Update one EstoqueItem
     * const estoqueItem = await prisma.estoqueItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstoqueItemUpdateArgs>(args: SelectSubset<T, EstoqueItemUpdateArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EstoqueItems.
     * @param {EstoqueItemDeleteManyArgs} args - Arguments to filter EstoqueItems to delete.
     * @example
     * // Delete a few EstoqueItems
     * const { count } = await prisma.estoqueItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstoqueItemDeleteManyArgs>(args?: SelectSubset<T, EstoqueItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstoqueItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EstoqueItems
     * const estoqueItem = await prisma.estoqueItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstoqueItemUpdateManyArgs>(args: SelectSubset<T, EstoqueItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstoqueItems and returns the data updated in the database.
     * @param {EstoqueItemUpdateManyAndReturnArgs} args - Arguments to update many EstoqueItems.
     * @example
     * // Update many EstoqueItems
     * const estoqueItem = await prisma.estoqueItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EstoqueItems and only return the `id`
     * const estoqueItemWithIdOnly = await prisma.estoqueItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EstoqueItemUpdateManyAndReturnArgs>(args: SelectSubset<T, EstoqueItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EstoqueItem.
     * @param {EstoqueItemUpsertArgs} args - Arguments to update or create a EstoqueItem.
     * @example
     * // Update or create a EstoqueItem
     * const estoqueItem = await prisma.estoqueItem.upsert({
     *   create: {
     *     // ... data to create a EstoqueItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EstoqueItem we want to update
     *   }
     * })
     */
    upsert<T extends EstoqueItemUpsertArgs>(args: SelectSubset<T, EstoqueItemUpsertArgs<ExtArgs>>): Prisma__EstoqueItemClient<$Result.GetResult<Prisma.$EstoqueItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EstoqueItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemCountArgs} args - Arguments to filter EstoqueItems to count.
     * @example
     * // Count the number of EstoqueItems
     * const count = await prisma.estoqueItem.count({
     *   where: {
     *     // ... the filter for the EstoqueItems we want to count
     *   }
     * })
    **/
    count<T extends EstoqueItemCountArgs>(
      args?: Subset<T, EstoqueItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstoqueItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EstoqueItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstoqueItemAggregateArgs>(args: Subset<T, EstoqueItemAggregateArgs>): Prisma.PrismaPromise<GetEstoqueItemAggregateType<T>>

    /**
     * Group by EstoqueItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstoqueItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstoqueItemGroupByArgs['orderBy'] }
        : { orderBy?: EstoqueItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstoqueItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstoqueItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EstoqueItem model
   */
  readonly fields: EstoqueItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EstoqueItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstoqueItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    estoque<T extends EstoqueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstoqueDefaultArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EstoqueItem model
   */
  interface EstoqueItemFieldRefs {
    readonly id: FieldRef<"EstoqueItem", 'Int'>
    readonly itemId: FieldRef<"EstoqueItem", 'Int'>
    readonly estoqueId: FieldRef<"EstoqueItem", 'Int'>
    readonly quantidade: FieldRef<"EstoqueItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EstoqueItem findUnique
   */
  export type EstoqueItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * Filter, which EstoqueItem to fetch.
     */
    where: EstoqueItemWhereUniqueInput
  }

  /**
   * EstoqueItem findUniqueOrThrow
   */
  export type EstoqueItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * Filter, which EstoqueItem to fetch.
     */
    where: EstoqueItemWhereUniqueInput
  }

  /**
   * EstoqueItem findFirst
   */
  export type EstoqueItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * Filter, which EstoqueItem to fetch.
     */
    where?: EstoqueItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstoqueItems to fetch.
     */
    orderBy?: EstoqueItemOrderByWithRelationInput | EstoqueItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstoqueItems.
     */
    cursor?: EstoqueItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstoqueItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstoqueItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstoqueItems.
     */
    distinct?: EstoqueItemScalarFieldEnum | EstoqueItemScalarFieldEnum[]
  }

  /**
   * EstoqueItem findFirstOrThrow
   */
  export type EstoqueItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * Filter, which EstoqueItem to fetch.
     */
    where?: EstoqueItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstoqueItems to fetch.
     */
    orderBy?: EstoqueItemOrderByWithRelationInput | EstoqueItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstoqueItems.
     */
    cursor?: EstoqueItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstoqueItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstoqueItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstoqueItems.
     */
    distinct?: EstoqueItemScalarFieldEnum | EstoqueItemScalarFieldEnum[]
  }

  /**
   * EstoqueItem findMany
   */
  export type EstoqueItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * Filter, which EstoqueItems to fetch.
     */
    where?: EstoqueItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstoqueItems to fetch.
     */
    orderBy?: EstoqueItemOrderByWithRelationInput | EstoqueItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EstoqueItems.
     */
    cursor?: EstoqueItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstoqueItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstoqueItems.
     */
    skip?: number
    distinct?: EstoqueItemScalarFieldEnum | EstoqueItemScalarFieldEnum[]
  }

  /**
   * EstoqueItem create
   */
  export type EstoqueItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * The data needed to create a EstoqueItem.
     */
    data: XOR<EstoqueItemCreateInput, EstoqueItemUncheckedCreateInput>
  }

  /**
   * EstoqueItem createMany
   */
  export type EstoqueItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EstoqueItems.
     */
    data: EstoqueItemCreateManyInput | EstoqueItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EstoqueItem createManyAndReturn
   */
  export type EstoqueItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * The data used to create many EstoqueItems.
     */
    data: EstoqueItemCreateManyInput | EstoqueItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EstoqueItem update
   */
  export type EstoqueItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * The data needed to update a EstoqueItem.
     */
    data: XOR<EstoqueItemUpdateInput, EstoqueItemUncheckedUpdateInput>
    /**
     * Choose, which EstoqueItem to update.
     */
    where: EstoqueItemWhereUniqueInput
  }

  /**
   * EstoqueItem updateMany
   */
  export type EstoqueItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EstoqueItems.
     */
    data: XOR<EstoqueItemUpdateManyMutationInput, EstoqueItemUncheckedUpdateManyInput>
    /**
     * Filter which EstoqueItems to update
     */
    where?: EstoqueItemWhereInput
    /**
     * Limit how many EstoqueItems to update.
     */
    limit?: number
  }

  /**
   * EstoqueItem updateManyAndReturn
   */
  export type EstoqueItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * The data used to update EstoqueItems.
     */
    data: XOR<EstoqueItemUpdateManyMutationInput, EstoqueItemUncheckedUpdateManyInput>
    /**
     * Filter which EstoqueItems to update
     */
    where?: EstoqueItemWhereInput
    /**
     * Limit how many EstoqueItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EstoqueItem upsert
   */
  export type EstoqueItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * The filter to search for the EstoqueItem to update in case it exists.
     */
    where: EstoqueItemWhereUniqueInput
    /**
     * In case the EstoqueItem found by the `where` argument doesn't exist, create a new EstoqueItem with this data.
     */
    create: XOR<EstoqueItemCreateInput, EstoqueItemUncheckedCreateInput>
    /**
     * In case the EstoqueItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstoqueItemUpdateInput, EstoqueItemUncheckedUpdateInput>
  }

  /**
   * EstoqueItem delete
   */
  export type EstoqueItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
    /**
     * Filter which EstoqueItem to delete.
     */
    where: EstoqueItemWhereUniqueInput
  }

  /**
   * EstoqueItem deleteMany
   */
  export type EstoqueItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EstoqueItems to delete
     */
    where?: EstoqueItemWhereInput
    /**
     * Limit how many EstoqueItems to delete.
     */
    limit?: number
  }

  /**
   * EstoqueItem without action
   */
  export type EstoqueItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstoqueItem
     */
    select?: EstoqueItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstoqueItem
     */
    omit?: EstoqueItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstoqueItemInclude<ExtArgs> | null
  }


  /**
   * Model Transferencia
   */

  export type AggregateTransferencia = {
    _count: TransferenciaCountAggregateOutputType | null
    _avg: TransferenciaAvgAggregateOutputType | null
    _sum: TransferenciaSumAggregateOutputType | null
    _min: TransferenciaMinAggregateOutputType | null
    _max: TransferenciaMaxAggregateOutputType | null
  }

  export type TransferenciaAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueOrigemId: number | null
    estoqueDestinoId: number | null
    quantidade: number | null
  }

  export type TransferenciaSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueOrigemId: number | null
    estoqueDestinoId: number | null
    quantidade: number | null
  }

  export type TransferenciaMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueOrigemId: number | null
    estoqueDestinoId: number | null
    quantidade: number | null
    dataTransferencia: Date | null
  }

  export type TransferenciaMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    estoqueOrigemId: number | null
    estoqueDestinoId: number | null
    quantidade: number | null
    dataTransferencia: Date | null
  }

  export type TransferenciaCountAggregateOutputType = {
    id: number
    itemId: number
    estoqueOrigemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia: number
    _all: number
  }


  export type TransferenciaAvgAggregateInputType = {
    id?: true
    itemId?: true
    estoqueOrigemId?: true
    estoqueDestinoId?: true
    quantidade?: true
  }

  export type TransferenciaSumAggregateInputType = {
    id?: true
    itemId?: true
    estoqueOrigemId?: true
    estoqueDestinoId?: true
    quantidade?: true
  }

  export type TransferenciaMinAggregateInputType = {
    id?: true
    itemId?: true
    estoqueOrigemId?: true
    estoqueDestinoId?: true
    quantidade?: true
    dataTransferencia?: true
  }

  export type TransferenciaMaxAggregateInputType = {
    id?: true
    itemId?: true
    estoqueOrigemId?: true
    estoqueDestinoId?: true
    quantidade?: true
    dataTransferencia?: true
  }

  export type TransferenciaCountAggregateInputType = {
    id?: true
    itemId?: true
    estoqueOrigemId?: true
    estoqueDestinoId?: true
    quantidade?: true
    dataTransferencia?: true
    _all?: true
  }

  export type TransferenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transferencia to aggregate.
     */
    where?: TransferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transferencias to fetch.
     */
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transferencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transferencias
    **/
    _count?: true | TransferenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransferenciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransferenciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransferenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransferenciaMaxAggregateInputType
  }

  export type GetTransferenciaAggregateType<T extends TransferenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateTransferencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransferencia[P]>
      : GetScalarType<T[P], AggregateTransferencia[P]>
  }




  export type TransferenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransferenciaWhereInput
    orderBy?: TransferenciaOrderByWithAggregationInput | TransferenciaOrderByWithAggregationInput[]
    by: TransferenciaScalarFieldEnum[] | TransferenciaScalarFieldEnum
    having?: TransferenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransferenciaCountAggregateInputType | true
    _avg?: TransferenciaAvgAggregateInputType
    _sum?: TransferenciaSumAggregateInputType
    _min?: TransferenciaMinAggregateInputType
    _max?: TransferenciaMaxAggregateInputType
  }

  export type TransferenciaGroupByOutputType = {
    id: number
    itemId: number
    estoqueOrigemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia: Date | null
    _count: TransferenciaCountAggregateOutputType | null
    _avg: TransferenciaAvgAggregateOutputType | null
    _sum: TransferenciaSumAggregateOutputType | null
    _min: TransferenciaMinAggregateOutputType | null
    _max: TransferenciaMaxAggregateOutputType | null
  }

  type GetTransferenciaGroupByPayload<T extends TransferenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransferenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransferenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransferenciaGroupByOutputType[P]>
            : GetScalarType<T[P], TransferenciaGroupByOutputType[P]>
        }
      >
    >


  export type TransferenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    estoqueOrigemId?: boolean
    estoqueDestinoId?: boolean
    quantidade?: boolean
    dataTransferencia?: boolean
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    origem?: boolean | EstoqueDefaultArgs<ExtArgs>
    destino?: boolean | EstoqueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transferencia"]>

  export type TransferenciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    estoqueOrigemId?: boolean
    estoqueDestinoId?: boolean
    quantidade?: boolean
    dataTransferencia?: boolean
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    origem?: boolean | EstoqueDefaultArgs<ExtArgs>
    destino?: boolean | EstoqueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transferencia"]>

  export type TransferenciaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    estoqueOrigemId?: boolean
    estoqueDestinoId?: boolean
    quantidade?: boolean
    dataTransferencia?: boolean
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    origem?: boolean | EstoqueDefaultArgs<ExtArgs>
    destino?: boolean | EstoqueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transferencia"]>

  export type TransferenciaSelectScalar = {
    id?: boolean
    itemId?: boolean
    estoqueOrigemId?: boolean
    estoqueDestinoId?: boolean
    quantidade?: boolean
    dataTransferencia?: boolean
  }

  export type TransferenciaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemId" | "estoqueOrigemId" | "estoqueDestinoId" | "quantidade" | "dataTransferencia", ExtArgs["result"]["transferencia"]>
  export type TransferenciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    origem?: boolean | EstoqueDefaultArgs<ExtArgs>
    destino?: boolean | EstoqueDefaultArgs<ExtArgs>
  }
  export type TransferenciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    origem?: boolean | EstoqueDefaultArgs<ExtArgs>
    destino?: boolean | EstoqueDefaultArgs<ExtArgs>
  }
  export type TransferenciaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | EquipamentoDefaultArgs<ExtArgs>
    origem?: boolean | EstoqueDefaultArgs<ExtArgs>
    destino?: boolean | EstoqueDefaultArgs<ExtArgs>
  }

  export type $TransferenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transferencia"
    objects: {
      item: Prisma.$EquipamentoPayload<ExtArgs>
      origem: Prisma.$EstoquePayload<ExtArgs>
      destino: Prisma.$EstoquePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      estoqueOrigemId: number
      estoqueDestinoId: number
      quantidade: number
      dataTransferencia: Date | null
    }, ExtArgs["result"]["transferencia"]>
    composites: {}
  }

  type TransferenciaGetPayload<S extends boolean | null | undefined | TransferenciaDefaultArgs> = $Result.GetResult<Prisma.$TransferenciaPayload, S>

  type TransferenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransferenciaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransferenciaCountAggregateInputType | true
    }

  export interface TransferenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transferencia'], meta: { name: 'Transferencia' } }
    /**
     * Find zero or one Transferencia that matches the filter.
     * @param {TransferenciaFindUniqueArgs} args - Arguments to find a Transferencia
     * @example
     * // Get one Transferencia
     * const transferencia = await prisma.transferencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransferenciaFindUniqueArgs>(args: SelectSubset<T, TransferenciaFindUniqueArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transferencia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransferenciaFindUniqueOrThrowArgs} args - Arguments to find a Transferencia
     * @example
     * // Get one Transferencia
     * const transferencia = await prisma.transferencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransferenciaFindUniqueOrThrowArgs>(args: SelectSubset<T, TransferenciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transferencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaFindFirstArgs} args - Arguments to find a Transferencia
     * @example
     * // Get one Transferencia
     * const transferencia = await prisma.transferencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransferenciaFindFirstArgs>(args?: SelectSubset<T, TransferenciaFindFirstArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transferencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaFindFirstOrThrowArgs} args - Arguments to find a Transferencia
     * @example
     * // Get one Transferencia
     * const transferencia = await prisma.transferencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransferenciaFindFirstOrThrowArgs>(args?: SelectSubset<T, TransferenciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transferencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transferencias
     * const transferencias = await prisma.transferencia.findMany()
     * 
     * // Get first 10 Transferencias
     * const transferencias = await prisma.transferencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transferenciaWithIdOnly = await prisma.transferencia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransferenciaFindManyArgs>(args?: SelectSubset<T, TransferenciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transferencia.
     * @param {TransferenciaCreateArgs} args - Arguments to create a Transferencia.
     * @example
     * // Create one Transferencia
     * const Transferencia = await prisma.transferencia.create({
     *   data: {
     *     // ... data to create a Transferencia
     *   }
     * })
     * 
     */
    create<T extends TransferenciaCreateArgs>(args: SelectSubset<T, TransferenciaCreateArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transferencias.
     * @param {TransferenciaCreateManyArgs} args - Arguments to create many Transferencias.
     * @example
     * // Create many Transferencias
     * const transferencia = await prisma.transferencia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransferenciaCreateManyArgs>(args?: SelectSubset<T, TransferenciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transferencias and returns the data saved in the database.
     * @param {TransferenciaCreateManyAndReturnArgs} args - Arguments to create many Transferencias.
     * @example
     * // Create many Transferencias
     * const transferencia = await prisma.transferencia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transferencias and only return the `id`
     * const transferenciaWithIdOnly = await prisma.transferencia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransferenciaCreateManyAndReturnArgs>(args?: SelectSubset<T, TransferenciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transferencia.
     * @param {TransferenciaDeleteArgs} args - Arguments to delete one Transferencia.
     * @example
     * // Delete one Transferencia
     * const Transferencia = await prisma.transferencia.delete({
     *   where: {
     *     // ... filter to delete one Transferencia
     *   }
     * })
     * 
     */
    delete<T extends TransferenciaDeleteArgs>(args: SelectSubset<T, TransferenciaDeleteArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transferencia.
     * @param {TransferenciaUpdateArgs} args - Arguments to update one Transferencia.
     * @example
     * // Update one Transferencia
     * const transferencia = await prisma.transferencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransferenciaUpdateArgs>(args: SelectSubset<T, TransferenciaUpdateArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transferencias.
     * @param {TransferenciaDeleteManyArgs} args - Arguments to filter Transferencias to delete.
     * @example
     * // Delete a few Transferencias
     * const { count } = await prisma.transferencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransferenciaDeleteManyArgs>(args?: SelectSubset<T, TransferenciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transferencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transferencias
     * const transferencia = await prisma.transferencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransferenciaUpdateManyArgs>(args: SelectSubset<T, TransferenciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transferencias and returns the data updated in the database.
     * @param {TransferenciaUpdateManyAndReturnArgs} args - Arguments to update many Transferencias.
     * @example
     * // Update many Transferencias
     * const transferencia = await prisma.transferencia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transferencias and only return the `id`
     * const transferenciaWithIdOnly = await prisma.transferencia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransferenciaUpdateManyAndReturnArgs>(args: SelectSubset<T, TransferenciaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transferencia.
     * @param {TransferenciaUpsertArgs} args - Arguments to update or create a Transferencia.
     * @example
     * // Update or create a Transferencia
     * const transferencia = await prisma.transferencia.upsert({
     *   create: {
     *     // ... data to create a Transferencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transferencia we want to update
     *   }
     * })
     */
    upsert<T extends TransferenciaUpsertArgs>(args: SelectSubset<T, TransferenciaUpsertArgs<ExtArgs>>): Prisma__TransferenciaClient<$Result.GetResult<Prisma.$TransferenciaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transferencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaCountArgs} args - Arguments to filter Transferencias to count.
     * @example
     * // Count the number of Transferencias
     * const count = await prisma.transferencia.count({
     *   where: {
     *     // ... the filter for the Transferencias we want to count
     *   }
     * })
    **/
    count<T extends TransferenciaCountArgs>(
      args?: Subset<T, TransferenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransferenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transferencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransferenciaAggregateArgs>(args: Subset<T, TransferenciaAggregateArgs>): Prisma.PrismaPromise<GetTransferenciaAggregateType<T>>

    /**
     * Group by Transferencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransferenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransferenciaGroupByArgs['orderBy'] }
        : { orderBy?: TransferenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransferenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransferenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transferencia model
   */
  readonly fields: TransferenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transferencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransferenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends EquipamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipamentoDefaultArgs<ExtArgs>>): Prisma__EquipamentoClient<$Result.GetResult<Prisma.$EquipamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    origem<T extends EstoqueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstoqueDefaultArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    destino<T extends EstoqueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstoqueDefaultArgs<ExtArgs>>): Prisma__EstoqueClient<$Result.GetResult<Prisma.$EstoquePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transferencia model
   */
  interface TransferenciaFieldRefs {
    readonly id: FieldRef<"Transferencia", 'Int'>
    readonly itemId: FieldRef<"Transferencia", 'Int'>
    readonly estoqueOrigemId: FieldRef<"Transferencia", 'Int'>
    readonly estoqueDestinoId: FieldRef<"Transferencia", 'Int'>
    readonly quantidade: FieldRef<"Transferencia", 'Int'>
    readonly dataTransferencia: FieldRef<"Transferencia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transferencia findUnique
   */
  export type TransferenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * Filter, which Transferencia to fetch.
     */
    where: TransferenciaWhereUniqueInput
  }

  /**
   * Transferencia findUniqueOrThrow
   */
  export type TransferenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * Filter, which Transferencia to fetch.
     */
    where: TransferenciaWhereUniqueInput
  }

  /**
   * Transferencia findFirst
   */
  export type TransferenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * Filter, which Transferencia to fetch.
     */
    where?: TransferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transferencias to fetch.
     */
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transferencias.
     */
    cursor?: TransferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transferencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transferencias.
     */
    distinct?: TransferenciaScalarFieldEnum | TransferenciaScalarFieldEnum[]
  }

  /**
   * Transferencia findFirstOrThrow
   */
  export type TransferenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * Filter, which Transferencia to fetch.
     */
    where?: TransferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transferencias to fetch.
     */
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transferencias.
     */
    cursor?: TransferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transferencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transferencias.
     */
    distinct?: TransferenciaScalarFieldEnum | TransferenciaScalarFieldEnum[]
  }

  /**
   * Transferencia findMany
   */
  export type TransferenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * Filter, which Transferencias to fetch.
     */
    where?: TransferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transferencias to fetch.
     */
    orderBy?: TransferenciaOrderByWithRelationInput | TransferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transferencias.
     */
    cursor?: TransferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transferencias.
     */
    skip?: number
    distinct?: TransferenciaScalarFieldEnum | TransferenciaScalarFieldEnum[]
  }

  /**
   * Transferencia create
   */
  export type TransferenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Transferencia.
     */
    data: XOR<TransferenciaCreateInput, TransferenciaUncheckedCreateInput>
  }

  /**
   * Transferencia createMany
   */
  export type TransferenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transferencias.
     */
    data: TransferenciaCreateManyInput | TransferenciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transferencia createManyAndReturn
   */
  export type TransferenciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * The data used to create many Transferencias.
     */
    data: TransferenciaCreateManyInput | TransferenciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transferencia update
   */
  export type TransferenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Transferencia.
     */
    data: XOR<TransferenciaUpdateInput, TransferenciaUncheckedUpdateInput>
    /**
     * Choose, which Transferencia to update.
     */
    where: TransferenciaWhereUniqueInput
  }

  /**
   * Transferencia updateMany
   */
  export type TransferenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transferencias.
     */
    data: XOR<TransferenciaUpdateManyMutationInput, TransferenciaUncheckedUpdateManyInput>
    /**
     * Filter which Transferencias to update
     */
    where?: TransferenciaWhereInput
    /**
     * Limit how many Transferencias to update.
     */
    limit?: number
  }

  /**
   * Transferencia updateManyAndReturn
   */
  export type TransferenciaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * The data used to update Transferencias.
     */
    data: XOR<TransferenciaUpdateManyMutationInput, TransferenciaUncheckedUpdateManyInput>
    /**
     * Filter which Transferencias to update
     */
    where?: TransferenciaWhereInput
    /**
     * Limit how many Transferencias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transferencia upsert
   */
  export type TransferenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Transferencia to update in case it exists.
     */
    where: TransferenciaWhereUniqueInput
    /**
     * In case the Transferencia found by the `where` argument doesn't exist, create a new Transferencia with this data.
     */
    create: XOR<TransferenciaCreateInput, TransferenciaUncheckedCreateInput>
    /**
     * In case the Transferencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransferenciaUpdateInput, TransferenciaUncheckedUpdateInput>
  }

  /**
   * Transferencia delete
   */
  export type TransferenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
    /**
     * Filter which Transferencia to delete.
     */
    where: TransferenciaWhereUniqueInput
  }

  /**
   * Transferencia deleteMany
   */
  export type TransferenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transferencias to delete
     */
    where?: TransferenciaWhereInput
    /**
     * Limit how many Transferencias to delete.
     */
    limit?: number
  }

  /**
   * Transferencia without action
   */
  export type TransferenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transferencia
     */
    select?: TransferenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transferencia
     */
    omit?: TransferenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransferenciaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    matricula: 'matricula'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const EquipamentoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    quantidade: 'quantidade',
    data: 'data'
  };

  export type EquipamentoScalarFieldEnum = (typeof EquipamentoScalarFieldEnum)[keyof typeof EquipamentoScalarFieldEnum]


  export const EstoqueScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type EstoqueScalarFieldEnum = (typeof EstoqueScalarFieldEnum)[keyof typeof EstoqueScalarFieldEnum]


  export const EstoqueItemScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    estoqueId: 'estoqueId',
    quantidade: 'quantidade'
  };

  export type EstoqueItemScalarFieldEnum = (typeof EstoqueItemScalarFieldEnum)[keyof typeof EstoqueItemScalarFieldEnum]


  export const TransferenciaScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    estoqueOrigemId: 'estoqueOrigemId',
    estoqueDestinoId: 'estoqueDestinoId',
    quantidade: 'quantidade',
    dataTransferencia: 'dataTransferencia'
  };

  export type TransferenciaScalarFieldEnum = (typeof TransferenciaScalarFieldEnum)[keyof typeof TransferenciaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    matricula?: IntFilter<"Usuario"> | number
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    matricula?: SortOrder
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    matricula?: IntFilter<"Usuario"> | number
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    matricula?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    matricula?: IntWithAggregatesFilter<"Usuario"> | number
  }

  export type EquipamentoWhereInput = {
    AND?: EquipamentoWhereInput | EquipamentoWhereInput[]
    OR?: EquipamentoWhereInput[]
    NOT?: EquipamentoWhereInput | EquipamentoWhereInput[]
    id?: IntFilter<"Equipamento"> | number
    nome?: StringFilter<"Equipamento"> | string
    quantidade?: IntFilter<"Equipamento"> | number
    data?: DateTimeFilter<"Equipamento"> | Date | string
    transferencias?: TransferenciaListRelationFilter
    estoqueItens?: EstoqueItemListRelationFilter
  }

  export type EquipamentoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    transferencias?: TransferenciaOrderByRelationAggregateInput
    estoqueItens?: EstoqueItemOrderByRelationAggregateInput
  }

  export type EquipamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EquipamentoWhereInput | EquipamentoWhereInput[]
    OR?: EquipamentoWhereInput[]
    NOT?: EquipamentoWhereInput | EquipamentoWhereInput[]
    nome?: StringFilter<"Equipamento"> | string
    quantidade?: IntFilter<"Equipamento"> | number
    data?: DateTimeFilter<"Equipamento"> | Date | string
    transferencias?: TransferenciaListRelationFilter
    estoqueItens?: EstoqueItemListRelationFilter
  }, "id">

  export type EquipamentoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    _count?: EquipamentoCountOrderByAggregateInput
    _avg?: EquipamentoAvgOrderByAggregateInput
    _max?: EquipamentoMaxOrderByAggregateInput
    _min?: EquipamentoMinOrderByAggregateInput
    _sum?: EquipamentoSumOrderByAggregateInput
  }

  export type EquipamentoScalarWhereWithAggregatesInput = {
    AND?: EquipamentoScalarWhereWithAggregatesInput | EquipamentoScalarWhereWithAggregatesInput[]
    OR?: EquipamentoScalarWhereWithAggregatesInput[]
    NOT?: EquipamentoScalarWhereWithAggregatesInput | EquipamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Equipamento"> | number
    nome?: StringWithAggregatesFilter<"Equipamento"> | string
    quantidade?: IntWithAggregatesFilter<"Equipamento"> | number
    data?: DateTimeWithAggregatesFilter<"Equipamento"> | Date | string
  }

  export type EstoqueWhereInput = {
    AND?: EstoqueWhereInput | EstoqueWhereInput[]
    OR?: EstoqueWhereInput[]
    NOT?: EstoqueWhereInput | EstoqueWhereInput[]
    id?: IntFilter<"Estoque"> | number
    nome?: StringFilter<"Estoque"> | string
    transferenciasDestino?: TransferenciaListRelationFilter
    transferenciasOrigem?: TransferenciaListRelationFilter
    estoqueItens?: EstoqueItemListRelationFilter
  }

  export type EstoqueOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    transferenciasDestino?: TransferenciaOrderByRelationAggregateInput
    transferenciasOrigem?: TransferenciaOrderByRelationAggregateInput
    estoqueItens?: EstoqueItemOrderByRelationAggregateInput
  }

  export type EstoqueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EstoqueWhereInput | EstoqueWhereInput[]
    OR?: EstoqueWhereInput[]
    NOT?: EstoqueWhereInput | EstoqueWhereInput[]
    nome?: StringFilter<"Estoque"> | string
    transferenciasDestino?: TransferenciaListRelationFilter
    transferenciasOrigem?: TransferenciaListRelationFilter
    estoqueItens?: EstoqueItemListRelationFilter
  }, "id">

  export type EstoqueOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: EstoqueCountOrderByAggregateInput
    _avg?: EstoqueAvgOrderByAggregateInput
    _max?: EstoqueMaxOrderByAggregateInput
    _min?: EstoqueMinOrderByAggregateInput
    _sum?: EstoqueSumOrderByAggregateInput
  }

  export type EstoqueScalarWhereWithAggregatesInput = {
    AND?: EstoqueScalarWhereWithAggregatesInput | EstoqueScalarWhereWithAggregatesInput[]
    OR?: EstoqueScalarWhereWithAggregatesInput[]
    NOT?: EstoqueScalarWhereWithAggregatesInput | EstoqueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Estoque"> | number
    nome?: StringWithAggregatesFilter<"Estoque"> | string
  }

  export type EstoqueItemWhereInput = {
    AND?: EstoqueItemWhereInput | EstoqueItemWhereInput[]
    OR?: EstoqueItemWhereInput[]
    NOT?: EstoqueItemWhereInput | EstoqueItemWhereInput[]
    id?: IntFilter<"EstoqueItem"> | number
    itemId?: IntFilter<"EstoqueItem"> | number
    estoqueId?: IntFilter<"EstoqueItem"> | number
    quantidade?: IntFilter<"EstoqueItem"> | number
    item?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    estoque?: XOR<EstoqueScalarRelationFilter, EstoqueWhereInput>
  }

  export type EstoqueItemOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
    item?: EquipamentoOrderByWithRelationInput
    estoque?: EstoqueOrderByWithRelationInput
  }

  export type EstoqueItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    itemId_estoqueId?: EstoqueItemItemIdEstoqueIdCompoundUniqueInput
    AND?: EstoqueItemWhereInput | EstoqueItemWhereInput[]
    OR?: EstoqueItemWhereInput[]
    NOT?: EstoqueItemWhereInput | EstoqueItemWhereInput[]
    itemId?: IntFilter<"EstoqueItem"> | number
    estoqueId?: IntFilter<"EstoqueItem"> | number
    quantidade?: IntFilter<"EstoqueItem"> | number
    item?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    estoque?: XOR<EstoqueScalarRelationFilter, EstoqueWhereInput>
  }, "id" | "itemId_estoqueId">

  export type EstoqueItemOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
    _count?: EstoqueItemCountOrderByAggregateInput
    _avg?: EstoqueItemAvgOrderByAggregateInput
    _max?: EstoqueItemMaxOrderByAggregateInput
    _min?: EstoqueItemMinOrderByAggregateInput
    _sum?: EstoqueItemSumOrderByAggregateInput
  }

  export type EstoqueItemScalarWhereWithAggregatesInput = {
    AND?: EstoqueItemScalarWhereWithAggregatesInput | EstoqueItemScalarWhereWithAggregatesInput[]
    OR?: EstoqueItemScalarWhereWithAggregatesInput[]
    NOT?: EstoqueItemScalarWhereWithAggregatesInput | EstoqueItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EstoqueItem"> | number
    itemId?: IntWithAggregatesFilter<"EstoqueItem"> | number
    estoqueId?: IntWithAggregatesFilter<"EstoqueItem"> | number
    quantidade?: IntWithAggregatesFilter<"EstoqueItem"> | number
  }

  export type TransferenciaWhereInput = {
    AND?: TransferenciaWhereInput | TransferenciaWhereInput[]
    OR?: TransferenciaWhereInput[]
    NOT?: TransferenciaWhereInput | TransferenciaWhereInput[]
    id?: IntFilter<"Transferencia"> | number
    itemId?: IntFilter<"Transferencia"> | number
    estoqueOrigemId?: IntFilter<"Transferencia"> | number
    estoqueDestinoId?: IntFilter<"Transferencia"> | number
    quantidade?: IntFilter<"Transferencia"> | number
    dataTransferencia?: DateTimeNullableFilter<"Transferencia"> | Date | string | null
    item?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    origem?: XOR<EstoqueScalarRelationFilter, EstoqueWhereInput>
    destino?: XOR<EstoqueScalarRelationFilter, EstoqueWhereInput>
  }

  export type TransferenciaOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
    dataTransferencia?: SortOrderInput | SortOrder
    item?: EquipamentoOrderByWithRelationInput
    origem?: EstoqueOrderByWithRelationInput
    destino?: EstoqueOrderByWithRelationInput
  }

  export type TransferenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransferenciaWhereInput | TransferenciaWhereInput[]
    OR?: TransferenciaWhereInput[]
    NOT?: TransferenciaWhereInput | TransferenciaWhereInput[]
    itemId?: IntFilter<"Transferencia"> | number
    estoqueOrigemId?: IntFilter<"Transferencia"> | number
    estoqueDestinoId?: IntFilter<"Transferencia"> | number
    quantidade?: IntFilter<"Transferencia"> | number
    dataTransferencia?: DateTimeNullableFilter<"Transferencia"> | Date | string | null
    item?: XOR<EquipamentoScalarRelationFilter, EquipamentoWhereInput>
    origem?: XOR<EstoqueScalarRelationFilter, EstoqueWhereInput>
    destino?: XOR<EstoqueScalarRelationFilter, EstoqueWhereInput>
  }, "id">

  export type TransferenciaOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
    dataTransferencia?: SortOrderInput | SortOrder
    _count?: TransferenciaCountOrderByAggregateInput
    _avg?: TransferenciaAvgOrderByAggregateInput
    _max?: TransferenciaMaxOrderByAggregateInput
    _min?: TransferenciaMinOrderByAggregateInput
    _sum?: TransferenciaSumOrderByAggregateInput
  }

  export type TransferenciaScalarWhereWithAggregatesInput = {
    AND?: TransferenciaScalarWhereWithAggregatesInput | TransferenciaScalarWhereWithAggregatesInput[]
    OR?: TransferenciaScalarWhereWithAggregatesInput[]
    NOT?: TransferenciaScalarWhereWithAggregatesInput | TransferenciaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transferencia"> | number
    itemId?: IntWithAggregatesFilter<"Transferencia"> | number
    estoqueOrigemId?: IntWithAggregatesFilter<"Transferencia"> | number
    estoqueDestinoId?: IntWithAggregatesFilter<"Transferencia"> | number
    quantidade?: IntWithAggregatesFilter<"Transferencia"> | number
    dataTransferencia?: DateTimeNullableWithAggregatesFilter<"Transferencia"> | Date | string | null
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    matricula: number
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    matricula: number
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    matricula: number
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    matricula?: IntFieldUpdateOperationsInput | number
  }

  export type EquipamentoCreateInput = {
    nome: string
    quantidade: number
    data: Date | string
    transferencias?: TransferenciaCreateNestedManyWithoutItemInput
    estoqueItens?: EstoqueItemCreateNestedManyWithoutItemInput
  }

  export type EquipamentoUncheckedCreateInput = {
    id?: number
    nome: string
    quantidade: number
    data: Date | string
    transferencias?: TransferenciaUncheckedCreateNestedManyWithoutItemInput
    estoqueItens?: EstoqueItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type EquipamentoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    transferencias?: TransferenciaUpdateManyWithoutItemNestedInput
    estoqueItens?: EstoqueItemUpdateManyWithoutItemNestedInput
  }

  export type EquipamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    transferencias?: TransferenciaUncheckedUpdateManyWithoutItemNestedInput
    estoqueItens?: EstoqueItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type EquipamentoCreateManyInput = {
    id?: number
    nome: string
    quantidade: number
    data: Date | string
  }

  export type EquipamentoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstoqueCreateInput = {
    nome: string
    transferenciasDestino?: TransferenciaCreateNestedManyWithoutDestinoInput
    transferenciasOrigem?: TransferenciaCreateNestedManyWithoutOrigemInput
    estoqueItens?: EstoqueItemCreateNestedManyWithoutEstoqueInput
  }

  export type EstoqueUncheckedCreateInput = {
    id?: number
    nome: string
    transferenciasDestino?: TransferenciaUncheckedCreateNestedManyWithoutDestinoInput
    transferenciasOrigem?: TransferenciaUncheckedCreateNestedManyWithoutOrigemInput
    estoqueItens?: EstoqueItemUncheckedCreateNestedManyWithoutEstoqueInput
  }

  export type EstoqueUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasDestino?: TransferenciaUpdateManyWithoutDestinoNestedInput
    transferenciasOrigem?: TransferenciaUpdateManyWithoutOrigemNestedInput
    estoqueItens?: EstoqueItemUpdateManyWithoutEstoqueNestedInput
  }

  export type EstoqueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasDestino?: TransferenciaUncheckedUpdateManyWithoutDestinoNestedInput
    transferenciasOrigem?: TransferenciaUncheckedUpdateManyWithoutOrigemNestedInput
    estoqueItens?: EstoqueItemUncheckedUpdateManyWithoutEstoqueNestedInput
  }

  export type EstoqueCreateManyInput = {
    id?: number
    nome: string
  }

  export type EstoqueUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EstoqueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EstoqueItemCreateInput = {
    quantidade: number
    item: EquipamentoCreateNestedOneWithoutEstoqueItensInput
    estoque: EstoqueCreateNestedOneWithoutEstoqueItensInput
  }

  export type EstoqueItemUncheckedCreateInput = {
    id?: number
    itemId: number
    estoqueId: number
    quantidade: number
  }

  export type EstoqueItemUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    item?: EquipamentoUpdateOneRequiredWithoutEstoqueItensNestedInput
    estoque?: EstoqueUpdateOneRequiredWithoutEstoqueItensNestedInput
  }

  export type EstoqueItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type EstoqueItemCreateManyInput = {
    id?: number
    itemId: number
    estoqueId: number
    quantidade: number
  }

  export type EstoqueItemUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type EstoqueItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type TransferenciaCreateInput = {
    quantidade: number
    dataTransferencia?: Date | string | null
    item: EquipamentoCreateNestedOneWithoutTransferenciasInput
    origem: EstoqueCreateNestedOneWithoutTransferenciasOrigemInput
    destino: EstoqueCreateNestedOneWithoutTransferenciasDestinoInput
  }

  export type TransferenciaUncheckedCreateInput = {
    id?: number
    itemId: number
    estoqueOrigemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type TransferenciaUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: EquipamentoUpdateOneRequiredWithoutTransferenciasNestedInput
    origem?: EstoqueUpdateOneRequiredWithoutTransferenciasOrigemNestedInput
    destino?: EstoqueUpdateOneRequiredWithoutTransferenciasDestinoNestedInput
  }

  export type TransferenciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueOrigemId?: IntFieldUpdateOperationsInput | number
    estoqueDestinoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransferenciaCreateManyInput = {
    id?: number
    itemId: number
    estoqueOrigemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type TransferenciaUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransferenciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueOrigemId?: IntFieldUpdateOperationsInput | number
    estoqueDestinoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    matricula?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    matricula?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    matricula?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TransferenciaListRelationFilter = {
    every?: TransferenciaWhereInput
    some?: TransferenciaWhereInput
    none?: TransferenciaWhereInput
  }

  export type EstoqueItemListRelationFilter = {
    every?: EstoqueItemWhereInput
    some?: EstoqueItemWhereInput
    none?: EstoqueItemWhereInput
  }

  export type TransferenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EstoqueItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipamentoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
  }

  export type EquipamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
  }

  export type EquipamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
  }

  export type EquipamentoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
  }

  export type EquipamentoSumOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EstoqueCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EstoqueAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstoqueMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EstoqueMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EstoqueSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EquipamentoScalarRelationFilter = {
    is?: EquipamentoWhereInput
    isNot?: EquipamentoWhereInput
  }

  export type EstoqueScalarRelationFilter = {
    is?: EstoqueWhereInput
    isNot?: EstoqueWhereInput
  }

  export type EstoqueItemItemIdEstoqueIdCompoundUniqueInput = {
    itemId: number
    estoqueId: number
  }

  export type EstoqueItemCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
  }

  export type EstoqueItemAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
  }

  export type EstoqueItemMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
  }

  export type EstoqueItemMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
  }

  export type EstoqueItemSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueId?: SortOrder
    quantidade?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TransferenciaCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
    dataTransferencia?: SortOrder
  }

  export type TransferenciaAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
  }

  export type TransferenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
    dataTransferencia?: SortOrder
  }

  export type TransferenciaMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
    dataTransferencia?: SortOrder
  }

  export type TransferenciaSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    estoqueOrigemId?: SortOrder
    estoqueDestinoId?: SortOrder
    quantidade?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransferenciaCreateNestedManyWithoutItemInput = {
    create?: XOR<TransferenciaCreateWithoutItemInput, TransferenciaUncheckedCreateWithoutItemInput> | TransferenciaCreateWithoutItemInput[] | TransferenciaUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutItemInput | TransferenciaCreateOrConnectWithoutItemInput[]
    createMany?: TransferenciaCreateManyItemInputEnvelope
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
  }

  export type EstoqueItemCreateNestedManyWithoutItemInput = {
    create?: XOR<EstoqueItemCreateWithoutItemInput, EstoqueItemUncheckedCreateWithoutItemInput> | EstoqueItemCreateWithoutItemInput[] | EstoqueItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutItemInput | EstoqueItemCreateOrConnectWithoutItemInput[]
    createMany?: EstoqueItemCreateManyItemInputEnvelope
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
  }

  export type TransferenciaUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<TransferenciaCreateWithoutItemInput, TransferenciaUncheckedCreateWithoutItemInput> | TransferenciaCreateWithoutItemInput[] | TransferenciaUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutItemInput | TransferenciaCreateOrConnectWithoutItemInput[]
    createMany?: TransferenciaCreateManyItemInputEnvelope
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
  }

  export type EstoqueItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<EstoqueItemCreateWithoutItemInput, EstoqueItemUncheckedCreateWithoutItemInput> | EstoqueItemCreateWithoutItemInput[] | EstoqueItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutItemInput | EstoqueItemCreateOrConnectWithoutItemInput[]
    createMany?: EstoqueItemCreateManyItemInputEnvelope
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TransferenciaUpdateManyWithoutItemNestedInput = {
    create?: XOR<TransferenciaCreateWithoutItemInput, TransferenciaUncheckedCreateWithoutItemInput> | TransferenciaCreateWithoutItemInput[] | TransferenciaUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutItemInput | TransferenciaCreateOrConnectWithoutItemInput[]
    upsert?: TransferenciaUpsertWithWhereUniqueWithoutItemInput | TransferenciaUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: TransferenciaCreateManyItemInputEnvelope
    set?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    disconnect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    delete?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    update?: TransferenciaUpdateWithWhereUniqueWithoutItemInput | TransferenciaUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: TransferenciaUpdateManyWithWhereWithoutItemInput | TransferenciaUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
  }

  export type EstoqueItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<EstoqueItemCreateWithoutItemInput, EstoqueItemUncheckedCreateWithoutItemInput> | EstoqueItemCreateWithoutItemInput[] | EstoqueItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutItemInput | EstoqueItemCreateOrConnectWithoutItemInput[]
    upsert?: EstoqueItemUpsertWithWhereUniqueWithoutItemInput | EstoqueItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: EstoqueItemCreateManyItemInputEnvelope
    set?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    disconnect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    delete?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    update?: EstoqueItemUpdateWithWhereUniqueWithoutItemInput | EstoqueItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: EstoqueItemUpdateManyWithWhereWithoutItemInput | EstoqueItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: EstoqueItemScalarWhereInput | EstoqueItemScalarWhereInput[]
  }

  export type TransferenciaUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<TransferenciaCreateWithoutItemInput, TransferenciaUncheckedCreateWithoutItemInput> | TransferenciaCreateWithoutItemInput[] | TransferenciaUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutItemInput | TransferenciaCreateOrConnectWithoutItemInput[]
    upsert?: TransferenciaUpsertWithWhereUniqueWithoutItemInput | TransferenciaUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: TransferenciaCreateManyItemInputEnvelope
    set?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    disconnect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    delete?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    update?: TransferenciaUpdateWithWhereUniqueWithoutItemInput | TransferenciaUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: TransferenciaUpdateManyWithWhereWithoutItemInput | TransferenciaUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
  }

  export type EstoqueItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<EstoqueItemCreateWithoutItemInput, EstoqueItemUncheckedCreateWithoutItemInput> | EstoqueItemCreateWithoutItemInput[] | EstoqueItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutItemInput | EstoqueItemCreateOrConnectWithoutItemInput[]
    upsert?: EstoqueItemUpsertWithWhereUniqueWithoutItemInput | EstoqueItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: EstoqueItemCreateManyItemInputEnvelope
    set?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    disconnect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    delete?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    update?: EstoqueItemUpdateWithWhereUniqueWithoutItemInput | EstoqueItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: EstoqueItemUpdateManyWithWhereWithoutItemInput | EstoqueItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: EstoqueItemScalarWhereInput | EstoqueItemScalarWhereInput[]
  }

  export type TransferenciaCreateNestedManyWithoutDestinoInput = {
    create?: XOR<TransferenciaCreateWithoutDestinoInput, TransferenciaUncheckedCreateWithoutDestinoInput> | TransferenciaCreateWithoutDestinoInput[] | TransferenciaUncheckedCreateWithoutDestinoInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutDestinoInput | TransferenciaCreateOrConnectWithoutDestinoInput[]
    createMany?: TransferenciaCreateManyDestinoInputEnvelope
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
  }

  export type TransferenciaCreateNestedManyWithoutOrigemInput = {
    create?: XOR<TransferenciaCreateWithoutOrigemInput, TransferenciaUncheckedCreateWithoutOrigemInput> | TransferenciaCreateWithoutOrigemInput[] | TransferenciaUncheckedCreateWithoutOrigemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutOrigemInput | TransferenciaCreateOrConnectWithoutOrigemInput[]
    createMany?: TransferenciaCreateManyOrigemInputEnvelope
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
  }

  export type EstoqueItemCreateNestedManyWithoutEstoqueInput = {
    create?: XOR<EstoqueItemCreateWithoutEstoqueInput, EstoqueItemUncheckedCreateWithoutEstoqueInput> | EstoqueItemCreateWithoutEstoqueInput[] | EstoqueItemUncheckedCreateWithoutEstoqueInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutEstoqueInput | EstoqueItemCreateOrConnectWithoutEstoqueInput[]
    createMany?: EstoqueItemCreateManyEstoqueInputEnvelope
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
  }

  export type TransferenciaUncheckedCreateNestedManyWithoutDestinoInput = {
    create?: XOR<TransferenciaCreateWithoutDestinoInput, TransferenciaUncheckedCreateWithoutDestinoInput> | TransferenciaCreateWithoutDestinoInput[] | TransferenciaUncheckedCreateWithoutDestinoInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutDestinoInput | TransferenciaCreateOrConnectWithoutDestinoInput[]
    createMany?: TransferenciaCreateManyDestinoInputEnvelope
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
  }

  export type TransferenciaUncheckedCreateNestedManyWithoutOrigemInput = {
    create?: XOR<TransferenciaCreateWithoutOrigemInput, TransferenciaUncheckedCreateWithoutOrigemInput> | TransferenciaCreateWithoutOrigemInput[] | TransferenciaUncheckedCreateWithoutOrigemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutOrigemInput | TransferenciaCreateOrConnectWithoutOrigemInput[]
    createMany?: TransferenciaCreateManyOrigemInputEnvelope
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
  }

  export type EstoqueItemUncheckedCreateNestedManyWithoutEstoqueInput = {
    create?: XOR<EstoqueItemCreateWithoutEstoqueInput, EstoqueItemUncheckedCreateWithoutEstoqueInput> | EstoqueItemCreateWithoutEstoqueInput[] | EstoqueItemUncheckedCreateWithoutEstoqueInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutEstoqueInput | EstoqueItemCreateOrConnectWithoutEstoqueInput[]
    createMany?: EstoqueItemCreateManyEstoqueInputEnvelope
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
  }

  export type TransferenciaUpdateManyWithoutDestinoNestedInput = {
    create?: XOR<TransferenciaCreateWithoutDestinoInput, TransferenciaUncheckedCreateWithoutDestinoInput> | TransferenciaCreateWithoutDestinoInput[] | TransferenciaUncheckedCreateWithoutDestinoInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutDestinoInput | TransferenciaCreateOrConnectWithoutDestinoInput[]
    upsert?: TransferenciaUpsertWithWhereUniqueWithoutDestinoInput | TransferenciaUpsertWithWhereUniqueWithoutDestinoInput[]
    createMany?: TransferenciaCreateManyDestinoInputEnvelope
    set?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    disconnect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    delete?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    update?: TransferenciaUpdateWithWhereUniqueWithoutDestinoInput | TransferenciaUpdateWithWhereUniqueWithoutDestinoInput[]
    updateMany?: TransferenciaUpdateManyWithWhereWithoutDestinoInput | TransferenciaUpdateManyWithWhereWithoutDestinoInput[]
    deleteMany?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
  }

  export type TransferenciaUpdateManyWithoutOrigemNestedInput = {
    create?: XOR<TransferenciaCreateWithoutOrigemInput, TransferenciaUncheckedCreateWithoutOrigemInput> | TransferenciaCreateWithoutOrigemInput[] | TransferenciaUncheckedCreateWithoutOrigemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutOrigemInput | TransferenciaCreateOrConnectWithoutOrigemInput[]
    upsert?: TransferenciaUpsertWithWhereUniqueWithoutOrigemInput | TransferenciaUpsertWithWhereUniqueWithoutOrigemInput[]
    createMany?: TransferenciaCreateManyOrigemInputEnvelope
    set?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    disconnect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    delete?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    update?: TransferenciaUpdateWithWhereUniqueWithoutOrigemInput | TransferenciaUpdateWithWhereUniqueWithoutOrigemInput[]
    updateMany?: TransferenciaUpdateManyWithWhereWithoutOrigemInput | TransferenciaUpdateManyWithWhereWithoutOrigemInput[]
    deleteMany?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
  }

  export type EstoqueItemUpdateManyWithoutEstoqueNestedInput = {
    create?: XOR<EstoqueItemCreateWithoutEstoqueInput, EstoqueItemUncheckedCreateWithoutEstoqueInput> | EstoqueItemCreateWithoutEstoqueInput[] | EstoqueItemUncheckedCreateWithoutEstoqueInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutEstoqueInput | EstoqueItemCreateOrConnectWithoutEstoqueInput[]
    upsert?: EstoqueItemUpsertWithWhereUniqueWithoutEstoqueInput | EstoqueItemUpsertWithWhereUniqueWithoutEstoqueInput[]
    createMany?: EstoqueItemCreateManyEstoqueInputEnvelope
    set?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    disconnect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    delete?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    update?: EstoqueItemUpdateWithWhereUniqueWithoutEstoqueInput | EstoqueItemUpdateWithWhereUniqueWithoutEstoqueInput[]
    updateMany?: EstoqueItemUpdateManyWithWhereWithoutEstoqueInput | EstoqueItemUpdateManyWithWhereWithoutEstoqueInput[]
    deleteMany?: EstoqueItemScalarWhereInput | EstoqueItemScalarWhereInput[]
  }

  export type TransferenciaUncheckedUpdateManyWithoutDestinoNestedInput = {
    create?: XOR<TransferenciaCreateWithoutDestinoInput, TransferenciaUncheckedCreateWithoutDestinoInput> | TransferenciaCreateWithoutDestinoInput[] | TransferenciaUncheckedCreateWithoutDestinoInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutDestinoInput | TransferenciaCreateOrConnectWithoutDestinoInput[]
    upsert?: TransferenciaUpsertWithWhereUniqueWithoutDestinoInput | TransferenciaUpsertWithWhereUniqueWithoutDestinoInput[]
    createMany?: TransferenciaCreateManyDestinoInputEnvelope
    set?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    disconnect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    delete?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    update?: TransferenciaUpdateWithWhereUniqueWithoutDestinoInput | TransferenciaUpdateWithWhereUniqueWithoutDestinoInput[]
    updateMany?: TransferenciaUpdateManyWithWhereWithoutDestinoInput | TransferenciaUpdateManyWithWhereWithoutDestinoInput[]
    deleteMany?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
  }

  export type TransferenciaUncheckedUpdateManyWithoutOrigemNestedInput = {
    create?: XOR<TransferenciaCreateWithoutOrigemInput, TransferenciaUncheckedCreateWithoutOrigemInput> | TransferenciaCreateWithoutOrigemInput[] | TransferenciaUncheckedCreateWithoutOrigemInput[]
    connectOrCreate?: TransferenciaCreateOrConnectWithoutOrigemInput | TransferenciaCreateOrConnectWithoutOrigemInput[]
    upsert?: TransferenciaUpsertWithWhereUniqueWithoutOrigemInput | TransferenciaUpsertWithWhereUniqueWithoutOrigemInput[]
    createMany?: TransferenciaCreateManyOrigemInputEnvelope
    set?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    disconnect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    delete?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    connect?: TransferenciaWhereUniqueInput | TransferenciaWhereUniqueInput[]
    update?: TransferenciaUpdateWithWhereUniqueWithoutOrigemInput | TransferenciaUpdateWithWhereUniqueWithoutOrigemInput[]
    updateMany?: TransferenciaUpdateManyWithWhereWithoutOrigemInput | TransferenciaUpdateManyWithWhereWithoutOrigemInput[]
    deleteMany?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
  }

  export type EstoqueItemUncheckedUpdateManyWithoutEstoqueNestedInput = {
    create?: XOR<EstoqueItemCreateWithoutEstoqueInput, EstoqueItemUncheckedCreateWithoutEstoqueInput> | EstoqueItemCreateWithoutEstoqueInput[] | EstoqueItemUncheckedCreateWithoutEstoqueInput[]
    connectOrCreate?: EstoqueItemCreateOrConnectWithoutEstoqueInput | EstoqueItemCreateOrConnectWithoutEstoqueInput[]
    upsert?: EstoqueItemUpsertWithWhereUniqueWithoutEstoqueInput | EstoqueItemUpsertWithWhereUniqueWithoutEstoqueInput[]
    createMany?: EstoqueItemCreateManyEstoqueInputEnvelope
    set?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    disconnect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    delete?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    connect?: EstoqueItemWhereUniqueInput | EstoqueItemWhereUniqueInput[]
    update?: EstoqueItemUpdateWithWhereUniqueWithoutEstoqueInput | EstoqueItemUpdateWithWhereUniqueWithoutEstoqueInput[]
    updateMany?: EstoqueItemUpdateManyWithWhereWithoutEstoqueInput | EstoqueItemUpdateManyWithWhereWithoutEstoqueInput[]
    deleteMany?: EstoqueItemScalarWhereInput | EstoqueItemScalarWhereInput[]
  }

  export type EquipamentoCreateNestedOneWithoutEstoqueItensInput = {
    create?: XOR<EquipamentoCreateWithoutEstoqueItensInput, EquipamentoUncheckedCreateWithoutEstoqueItensInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutEstoqueItensInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type EstoqueCreateNestedOneWithoutEstoqueItensInput = {
    create?: XOR<EstoqueCreateWithoutEstoqueItensInput, EstoqueUncheckedCreateWithoutEstoqueItensInput>
    connectOrCreate?: EstoqueCreateOrConnectWithoutEstoqueItensInput
    connect?: EstoqueWhereUniqueInput
  }

  export type EquipamentoUpdateOneRequiredWithoutEstoqueItensNestedInput = {
    create?: XOR<EquipamentoCreateWithoutEstoqueItensInput, EquipamentoUncheckedCreateWithoutEstoqueItensInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutEstoqueItensInput
    upsert?: EquipamentoUpsertWithoutEstoqueItensInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutEstoqueItensInput, EquipamentoUpdateWithoutEstoqueItensInput>, EquipamentoUncheckedUpdateWithoutEstoqueItensInput>
  }

  export type EstoqueUpdateOneRequiredWithoutEstoqueItensNestedInput = {
    create?: XOR<EstoqueCreateWithoutEstoqueItensInput, EstoqueUncheckedCreateWithoutEstoqueItensInput>
    connectOrCreate?: EstoqueCreateOrConnectWithoutEstoqueItensInput
    upsert?: EstoqueUpsertWithoutEstoqueItensInput
    connect?: EstoqueWhereUniqueInput
    update?: XOR<XOR<EstoqueUpdateToOneWithWhereWithoutEstoqueItensInput, EstoqueUpdateWithoutEstoqueItensInput>, EstoqueUncheckedUpdateWithoutEstoqueItensInput>
  }

  export type EquipamentoCreateNestedOneWithoutTransferenciasInput = {
    create?: XOR<EquipamentoCreateWithoutTransferenciasInput, EquipamentoUncheckedCreateWithoutTransferenciasInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutTransferenciasInput
    connect?: EquipamentoWhereUniqueInput
  }

  export type EstoqueCreateNestedOneWithoutTransferenciasOrigemInput = {
    create?: XOR<EstoqueCreateWithoutTransferenciasOrigemInput, EstoqueUncheckedCreateWithoutTransferenciasOrigemInput>
    connectOrCreate?: EstoqueCreateOrConnectWithoutTransferenciasOrigemInput
    connect?: EstoqueWhereUniqueInput
  }

  export type EstoqueCreateNestedOneWithoutTransferenciasDestinoInput = {
    create?: XOR<EstoqueCreateWithoutTransferenciasDestinoInput, EstoqueUncheckedCreateWithoutTransferenciasDestinoInput>
    connectOrCreate?: EstoqueCreateOrConnectWithoutTransferenciasDestinoInput
    connect?: EstoqueWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EquipamentoUpdateOneRequiredWithoutTransferenciasNestedInput = {
    create?: XOR<EquipamentoCreateWithoutTransferenciasInput, EquipamentoUncheckedCreateWithoutTransferenciasInput>
    connectOrCreate?: EquipamentoCreateOrConnectWithoutTransferenciasInput
    upsert?: EquipamentoUpsertWithoutTransferenciasInput
    connect?: EquipamentoWhereUniqueInput
    update?: XOR<XOR<EquipamentoUpdateToOneWithWhereWithoutTransferenciasInput, EquipamentoUpdateWithoutTransferenciasInput>, EquipamentoUncheckedUpdateWithoutTransferenciasInput>
  }

  export type EstoqueUpdateOneRequiredWithoutTransferenciasOrigemNestedInput = {
    create?: XOR<EstoqueCreateWithoutTransferenciasOrigemInput, EstoqueUncheckedCreateWithoutTransferenciasOrigemInput>
    connectOrCreate?: EstoqueCreateOrConnectWithoutTransferenciasOrigemInput
    upsert?: EstoqueUpsertWithoutTransferenciasOrigemInput
    connect?: EstoqueWhereUniqueInput
    update?: XOR<XOR<EstoqueUpdateToOneWithWhereWithoutTransferenciasOrigemInput, EstoqueUpdateWithoutTransferenciasOrigemInput>, EstoqueUncheckedUpdateWithoutTransferenciasOrigemInput>
  }

  export type EstoqueUpdateOneRequiredWithoutTransferenciasDestinoNestedInput = {
    create?: XOR<EstoqueCreateWithoutTransferenciasDestinoInput, EstoqueUncheckedCreateWithoutTransferenciasDestinoInput>
    connectOrCreate?: EstoqueCreateOrConnectWithoutTransferenciasDestinoInput
    upsert?: EstoqueUpsertWithoutTransferenciasDestinoInput
    connect?: EstoqueWhereUniqueInput
    update?: XOR<XOR<EstoqueUpdateToOneWithWhereWithoutTransferenciasDestinoInput, EstoqueUpdateWithoutTransferenciasDestinoInput>, EstoqueUncheckedUpdateWithoutTransferenciasDestinoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TransferenciaCreateWithoutItemInput = {
    quantidade: number
    dataTransferencia?: Date | string | null
    origem: EstoqueCreateNestedOneWithoutTransferenciasOrigemInput
    destino: EstoqueCreateNestedOneWithoutTransferenciasDestinoInput
  }

  export type TransferenciaUncheckedCreateWithoutItemInput = {
    id?: number
    estoqueOrigemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type TransferenciaCreateOrConnectWithoutItemInput = {
    where: TransferenciaWhereUniqueInput
    create: XOR<TransferenciaCreateWithoutItemInput, TransferenciaUncheckedCreateWithoutItemInput>
  }

  export type TransferenciaCreateManyItemInputEnvelope = {
    data: TransferenciaCreateManyItemInput | TransferenciaCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type EstoqueItemCreateWithoutItemInput = {
    quantidade: number
    estoque: EstoqueCreateNestedOneWithoutEstoqueItensInput
  }

  export type EstoqueItemUncheckedCreateWithoutItemInput = {
    id?: number
    estoqueId: number
    quantidade: number
  }

  export type EstoqueItemCreateOrConnectWithoutItemInput = {
    where: EstoqueItemWhereUniqueInput
    create: XOR<EstoqueItemCreateWithoutItemInput, EstoqueItemUncheckedCreateWithoutItemInput>
  }

  export type EstoqueItemCreateManyItemInputEnvelope = {
    data: EstoqueItemCreateManyItemInput | EstoqueItemCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type TransferenciaUpsertWithWhereUniqueWithoutItemInput = {
    where: TransferenciaWhereUniqueInput
    update: XOR<TransferenciaUpdateWithoutItemInput, TransferenciaUncheckedUpdateWithoutItemInput>
    create: XOR<TransferenciaCreateWithoutItemInput, TransferenciaUncheckedCreateWithoutItemInput>
  }

  export type TransferenciaUpdateWithWhereUniqueWithoutItemInput = {
    where: TransferenciaWhereUniqueInput
    data: XOR<TransferenciaUpdateWithoutItemInput, TransferenciaUncheckedUpdateWithoutItemInput>
  }

  export type TransferenciaUpdateManyWithWhereWithoutItemInput = {
    where: TransferenciaScalarWhereInput
    data: XOR<TransferenciaUpdateManyMutationInput, TransferenciaUncheckedUpdateManyWithoutItemInput>
  }

  export type TransferenciaScalarWhereInput = {
    AND?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
    OR?: TransferenciaScalarWhereInput[]
    NOT?: TransferenciaScalarWhereInput | TransferenciaScalarWhereInput[]
    id?: IntFilter<"Transferencia"> | number
    itemId?: IntFilter<"Transferencia"> | number
    estoqueOrigemId?: IntFilter<"Transferencia"> | number
    estoqueDestinoId?: IntFilter<"Transferencia"> | number
    quantidade?: IntFilter<"Transferencia"> | number
    dataTransferencia?: DateTimeNullableFilter<"Transferencia"> | Date | string | null
  }

  export type EstoqueItemUpsertWithWhereUniqueWithoutItemInput = {
    where: EstoqueItemWhereUniqueInput
    update: XOR<EstoqueItemUpdateWithoutItemInput, EstoqueItemUncheckedUpdateWithoutItemInput>
    create: XOR<EstoqueItemCreateWithoutItemInput, EstoqueItemUncheckedCreateWithoutItemInput>
  }

  export type EstoqueItemUpdateWithWhereUniqueWithoutItemInput = {
    where: EstoqueItemWhereUniqueInput
    data: XOR<EstoqueItemUpdateWithoutItemInput, EstoqueItemUncheckedUpdateWithoutItemInput>
  }

  export type EstoqueItemUpdateManyWithWhereWithoutItemInput = {
    where: EstoqueItemScalarWhereInput
    data: XOR<EstoqueItemUpdateManyMutationInput, EstoqueItemUncheckedUpdateManyWithoutItemInput>
  }

  export type EstoqueItemScalarWhereInput = {
    AND?: EstoqueItemScalarWhereInput | EstoqueItemScalarWhereInput[]
    OR?: EstoqueItemScalarWhereInput[]
    NOT?: EstoqueItemScalarWhereInput | EstoqueItemScalarWhereInput[]
    id?: IntFilter<"EstoqueItem"> | number
    itemId?: IntFilter<"EstoqueItem"> | number
    estoqueId?: IntFilter<"EstoqueItem"> | number
    quantidade?: IntFilter<"EstoqueItem"> | number
  }

  export type TransferenciaCreateWithoutDestinoInput = {
    quantidade: number
    dataTransferencia?: Date | string | null
    item: EquipamentoCreateNestedOneWithoutTransferenciasInput
    origem: EstoqueCreateNestedOneWithoutTransferenciasOrigemInput
  }

  export type TransferenciaUncheckedCreateWithoutDestinoInput = {
    id?: number
    itemId: number
    estoqueOrigemId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type TransferenciaCreateOrConnectWithoutDestinoInput = {
    where: TransferenciaWhereUniqueInput
    create: XOR<TransferenciaCreateWithoutDestinoInput, TransferenciaUncheckedCreateWithoutDestinoInput>
  }

  export type TransferenciaCreateManyDestinoInputEnvelope = {
    data: TransferenciaCreateManyDestinoInput | TransferenciaCreateManyDestinoInput[]
    skipDuplicates?: boolean
  }

  export type TransferenciaCreateWithoutOrigemInput = {
    quantidade: number
    dataTransferencia?: Date | string | null
    item: EquipamentoCreateNestedOneWithoutTransferenciasInput
    destino: EstoqueCreateNestedOneWithoutTransferenciasDestinoInput
  }

  export type TransferenciaUncheckedCreateWithoutOrigemInput = {
    id?: number
    itemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type TransferenciaCreateOrConnectWithoutOrigemInput = {
    where: TransferenciaWhereUniqueInput
    create: XOR<TransferenciaCreateWithoutOrigemInput, TransferenciaUncheckedCreateWithoutOrigemInput>
  }

  export type TransferenciaCreateManyOrigemInputEnvelope = {
    data: TransferenciaCreateManyOrigemInput | TransferenciaCreateManyOrigemInput[]
    skipDuplicates?: boolean
  }

  export type EstoqueItemCreateWithoutEstoqueInput = {
    quantidade: number
    item: EquipamentoCreateNestedOneWithoutEstoqueItensInput
  }

  export type EstoqueItemUncheckedCreateWithoutEstoqueInput = {
    id?: number
    itemId: number
    quantidade: number
  }

  export type EstoqueItemCreateOrConnectWithoutEstoqueInput = {
    where: EstoqueItemWhereUniqueInput
    create: XOR<EstoqueItemCreateWithoutEstoqueInput, EstoqueItemUncheckedCreateWithoutEstoqueInput>
  }

  export type EstoqueItemCreateManyEstoqueInputEnvelope = {
    data: EstoqueItemCreateManyEstoqueInput | EstoqueItemCreateManyEstoqueInput[]
    skipDuplicates?: boolean
  }

  export type TransferenciaUpsertWithWhereUniqueWithoutDestinoInput = {
    where: TransferenciaWhereUniqueInput
    update: XOR<TransferenciaUpdateWithoutDestinoInput, TransferenciaUncheckedUpdateWithoutDestinoInput>
    create: XOR<TransferenciaCreateWithoutDestinoInput, TransferenciaUncheckedCreateWithoutDestinoInput>
  }

  export type TransferenciaUpdateWithWhereUniqueWithoutDestinoInput = {
    where: TransferenciaWhereUniqueInput
    data: XOR<TransferenciaUpdateWithoutDestinoInput, TransferenciaUncheckedUpdateWithoutDestinoInput>
  }

  export type TransferenciaUpdateManyWithWhereWithoutDestinoInput = {
    where: TransferenciaScalarWhereInput
    data: XOR<TransferenciaUpdateManyMutationInput, TransferenciaUncheckedUpdateManyWithoutDestinoInput>
  }

  export type TransferenciaUpsertWithWhereUniqueWithoutOrigemInput = {
    where: TransferenciaWhereUniqueInput
    update: XOR<TransferenciaUpdateWithoutOrigemInput, TransferenciaUncheckedUpdateWithoutOrigemInput>
    create: XOR<TransferenciaCreateWithoutOrigemInput, TransferenciaUncheckedCreateWithoutOrigemInput>
  }

  export type TransferenciaUpdateWithWhereUniqueWithoutOrigemInput = {
    where: TransferenciaWhereUniqueInput
    data: XOR<TransferenciaUpdateWithoutOrigemInput, TransferenciaUncheckedUpdateWithoutOrigemInput>
  }

  export type TransferenciaUpdateManyWithWhereWithoutOrigemInput = {
    where: TransferenciaScalarWhereInput
    data: XOR<TransferenciaUpdateManyMutationInput, TransferenciaUncheckedUpdateManyWithoutOrigemInput>
  }

  export type EstoqueItemUpsertWithWhereUniqueWithoutEstoqueInput = {
    where: EstoqueItemWhereUniqueInput
    update: XOR<EstoqueItemUpdateWithoutEstoqueInput, EstoqueItemUncheckedUpdateWithoutEstoqueInput>
    create: XOR<EstoqueItemCreateWithoutEstoqueInput, EstoqueItemUncheckedCreateWithoutEstoqueInput>
  }

  export type EstoqueItemUpdateWithWhereUniqueWithoutEstoqueInput = {
    where: EstoqueItemWhereUniqueInput
    data: XOR<EstoqueItemUpdateWithoutEstoqueInput, EstoqueItemUncheckedUpdateWithoutEstoqueInput>
  }

  export type EstoqueItemUpdateManyWithWhereWithoutEstoqueInput = {
    where: EstoqueItemScalarWhereInput
    data: XOR<EstoqueItemUpdateManyMutationInput, EstoqueItemUncheckedUpdateManyWithoutEstoqueInput>
  }

  export type EquipamentoCreateWithoutEstoqueItensInput = {
    nome: string
    quantidade: number
    data: Date | string
    transferencias?: TransferenciaCreateNestedManyWithoutItemInput
  }

  export type EquipamentoUncheckedCreateWithoutEstoqueItensInput = {
    id?: number
    nome: string
    quantidade: number
    data: Date | string
    transferencias?: TransferenciaUncheckedCreateNestedManyWithoutItemInput
  }

  export type EquipamentoCreateOrConnectWithoutEstoqueItensInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutEstoqueItensInput, EquipamentoUncheckedCreateWithoutEstoqueItensInput>
  }

  export type EstoqueCreateWithoutEstoqueItensInput = {
    nome: string
    transferenciasDestino?: TransferenciaCreateNestedManyWithoutDestinoInput
    transferenciasOrigem?: TransferenciaCreateNestedManyWithoutOrigemInput
  }

  export type EstoqueUncheckedCreateWithoutEstoqueItensInput = {
    id?: number
    nome: string
    transferenciasDestino?: TransferenciaUncheckedCreateNestedManyWithoutDestinoInput
    transferenciasOrigem?: TransferenciaUncheckedCreateNestedManyWithoutOrigemInput
  }

  export type EstoqueCreateOrConnectWithoutEstoqueItensInput = {
    where: EstoqueWhereUniqueInput
    create: XOR<EstoqueCreateWithoutEstoqueItensInput, EstoqueUncheckedCreateWithoutEstoqueItensInput>
  }

  export type EquipamentoUpsertWithoutEstoqueItensInput = {
    update: XOR<EquipamentoUpdateWithoutEstoqueItensInput, EquipamentoUncheckedUpdateWithoutEstoqueItensInput>
    create: XOR<EquipamentoCreateWithoutEstoqueItensInput, EquipamentoUncheckedCreateWithoutEstoqueItensInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutEstoqueItensInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutEstoqueItensInput, EquipamentoUncheckedUpdateWithoutEstoqueItensInput>
  }

  export type EquipamentoUpdateWithoutEstoqueItensInput = {
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    transferencias?: TransferenciaUpdateManyWithoutItemNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutEstoqueItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    transferencias?: TransferenciaUncheckedUpdateManyWithoutItemNestedInput
  }

  export type EstoqueUpsertWithoutEstoqueItensInput = {
    update: XOR<EstoqueUpdateWithoutEstoqueItensInput, EstoqueUncheckedUpdateWithoutEstoqueItensInput>
    create: XOR<EstoqueCreateWithoutEstoqueItensInput, EstoqueUncheckedCreateWithoutEstoqueItensInput>
    where?: EstoqueWhereInput
  }

  export type EstoqueUpdateToOneWithWhereWithoutEstoqueItensInput = {
    where?: EstoqueWhereInput
    data: XOR<EstoqueUpdateWithoutEstoqueItensInput, EstoqueUncheckedUpdateWithoutEstoqueItensInput>
  }

  export type EstoqueUpdateWithoutEstoqueItensInput = {
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasDestino?: TransferenciaUpdateManyWithoutDestinoNestedInput
    transferenciasOrigem?: TransferenciaUpdateManyWithoutOrigemNestedInput
  }

  export type EstoqueUncheckedUpdateWithoutEstoqueItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasDestino?: TransferenciaUncheckedUpdateManyWithoutDestinoNestedInput
    transferenciasOrigem?: TransferenciaUncheckedUpdateManyWithoutOrigemNestedInput
  }

  export type EquipamentoCreateWithoutTransferenciasInput = {
    nome: string
    quantidade: number
    data: Date | string
    estoqueItens?: EstoqueItemCreateNestedManyWithoutItemInput
  }

  export type EquipamentoUncheckedCreateWithoutTransferenciasInput = {
    id?: number
    nome: string
    quantidade: number
    data: Date | string
    estoqueItens?: EstoqueItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type EquipamentoCreateOrConnectWithoutTransferenciasInput = {
    where: EquipamentoWhereUniqueInput
    create: XOR<EquipamentoCreateWithoutTransferenciasInput, EquipamentoUncheckedCreateWithoutTransferenciasInput>
  }

  export type EstoqueCreateWithoutTransferenciasOrigemInput = {
    nome: string
    transferenciasDestino?: TransferenciaCreateNestedManyWithoutDestinoInput
    estoqueItens?: EstoqueItemCreateNestedManyWithoutEstoqueInput
  }

  export type EstoqueUncheckedCreateWithoutTransferenciasOrigemInput = {
    id?: number
    nome: string
    transferenciasDestino?: TransferenciaUncheckedCreateNestedManyWithoutDestinoInput
    estoqueItens?: EstoqueItemUncheckedCreateNestedManyWithoutEstoqueInput
  }

  export type EstoqueCreateOrConnectWithoutTransferenciasOrigemInput = {
    where: EstoqueWhereUniqueInput
    create: XOR<EstoqueCreateWithoutTransferenciasOrigemInput, EstoqueUncheckedCreateWithoutTransferenciasOrigemInput>
  }

  export type EstoqueCreateWithoutTransferenciasDestinoInput = {
    nome: string
    transferenciasOrigem?: TransferenciaCreateNestedManyWithoutOrigemInput
    estoqueItens?: EstoqueItemCreateNestedManyWithoutEstoqueInput
  }

  export type EstoqueUncheckedCreateWithoutTransferenciasDestinoInput = {
    id?: number
    nome: string
    transferenciasOrigem?: TransferenciaUncheckedCreateNestedManyWithoutOrigemInput
    estoqueItens?: EstoqueItemUncheckedCreateNestedManyWithoutEstoqueInput
  }

  export type EstoqueCreateOrConnectWithoutTransferenciasDestinoInput = {
    where: EstoqueWhereUniqueInput
    create: XOR<EstoqueCreateWithoutTransferenciasDestinoInput, EstoqueUncheckedCreateWithoutTransferenciasDestinoInput>
  }

  export type EquipamentoUpsertWithoutTransferenciasInput = {
    update: XOR<EquipamentoUpdateWithoutTransferenciasInput, EquipamentoUncheckedUpdateWithoutTransferenciasInput>
    create: XOR<EquipamentoCreateWithoutTransferenciasInput, EquipamentoUncheckedCreateWithoutTransferenciasInput>
    where?: EquipamentoWhereInput
  }

  export type EquipamentoUpdateToOneWithWhereWithoutTransferenciasInput = {
    where?: EquipamentoWhereInput
    data: XOR<EquipamentoUpdateWithoutTransferenciasInput, EquipamentoUncheckedUpdateWithoutTransferenciasInput>
  }

  export type EquipamentoUpdateWithoutTransferenciasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estoqueItens?: EstoqueItemUpdateManyWithoutItemNestedInput
  }

  export type EquipamentoUncheckedUpdateWithoutTransferenciasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estoqueItens?: EstoqueItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type EstoqueUpsertWithoutTransferenciasOrigemInput = {
    update: XOR<EstoqueUpdateWithoutTransferenciasOrigemInput, EstoqueUncheckedUpdateWithoutTransferenciasOrigemInput>
    create: XOR<EstoqueCreateWithoutTransferenciasOrigemInput, EstoqueUncheckedCreateWithoutTransferenciasOrigemInput>
    where?: EstoqueWhereInput
  }

  export type EstoqueUpdateToOneWithWhereWithoutTransferenciasOrigemInput = {
    where?: EstoqueWhereInput
    data: XOR<EstoqueUpdateWithoutTransferenciasOrigemInput, EstoqueUncheckedUpdateWithoutTransferenciasOrigemInput>
  }

  export type EstoqueUpdateWithoutTransferenciasOrigemInput = {
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasDestino?: TransferenciaUpdateManyWithoutDestinoNestedInput
    estoqueItens?: EstoqueItemUpdateManyWithoutEstoqueNestedInput
  }

  export type EstoqueUncheckedUpdateWithoutTransferenciasOrigemInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasDestino?: TransferenciaUncheckedUpdateManyWithoutDestinoNestedInput
    estoqueItens?: EstoqueItemUncheckedUpdateManyWithoutEstoqueNestedInput
  }

  export type EstoqueUpsertWithoutTransferenciasDestinoInput = {
    update: XOR<EstoqueUpdateWithoutTransferenciasDestinoInput, EstoqueUncheckedUpdateWithoutTransferenciasDestinoInput>
    create: XOR<EstoqueCreateWithoutTransferenciasDestinoInput, EstoqueUncheckedCreateWithoutTransferenciasDestinoInput>
    where?: EstoqueWhereInput
  }

  export type EstoqueUpdateToOneWithWhereWithoutTransferenciasDestinoInput = {
    where?: EstoqueWhereInput
    data: XOR<EstoqueUpdateWithoutTransferenciasDestinoInput, EstoqueUncheckedUpdateWithoutTransferenciasDestinoInput>
  }

  export type EstoqueUpdateWithoutTransferenciasDestinoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasOrigem?: TransferenciaUpdateManyWithoutOrigemNestedInput
    estoqueItens?: EstoqueItemUpdateManyWithoutEstoqueNestedInput
  }

  export type EstoqueUncheckedUpdateWithoutTransferenciasDestinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    transferenciasOrigem?: TransferenciaUncheckedUpdateManyWithoutOrigemNestedInput
    estoqueItens?: EstoqueItemUncheckedUpdateManyWithoutEstoqueNestedInput
  }

  export type TransferenciaCreateManyItemInput = {
    id?: number
    estoqueOrigemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type EstoqueItemCreateManyItemInput = {
    id?: number
    estoqueId: number
    quantidade: number
  }

  export type TransferenciaUpdateWithoutItemInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    origem?: EstoqueUpdateOneRequiredWithoutTransferenciasOrigemNestedInput
    destino?: EstoqueUpdateOneRequiredWithoutTransferenciasDestinoNestedInput
  }

  export type TransferenciaUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    estoqueOrigemId?: IntFieldUpdateOperationsInput | number
    estoqueDestinoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransferenciaUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    estoqueOrigemId?: IntFieldUpdateOperationsInput | number
    estoqueDestinoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EstoqueItemUpdateWithoutItemInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    estoque?: EstoqueUpdateOneRequiredWithoutEstoqueItensNestedInput
  }

  export type EstoqueItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    estoqueId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type EstoqueItemUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    estoqueId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type TransferenciaCreateManyDestinoInput = {
    id?: number
    itemId: number
    estoqueOrigemId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type TransferenciaCreateManyOrigemInput = {
    id?: number
    itemId: number
    estoqueDestinoId: number
    quantidade: number
    dataTransferencia?: Date | string | null
  }

  export type EstoqueItemCreateManyEstoqueInput = {
    id?: number
    itemId: number
    quantidade: number
  }

  export type TransferenciaUpdateWithoutDestinoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: EquipamentoUpdateOneRequiredWithoutTransferenciasNestedInput
    origem?: EstoqueUpdateOneRequiredWithoutTransferenciasOrigemNestedInput
  }

  export type TransferenciaUncheckedUpdateWithoutDestinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueOrigemId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransferenciaUncheckedUpdateManyWithoutDestinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueOrigemId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransferenciaUpdateWithoutOrigemInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: EquipamentoUpdateOneRequiredWithoutTransferenciasNestedInput
    destino?: EstoqueUpdateOneRequiredWithoutTransferenciasDestinoNestedInput
  }

  export type TransferenciaUncheckedUpdateWithoutOrigemInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueDestinoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransferenciaUncheckedUpdateManyWithoutOrigemInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    estoqueDestinoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    dataTransferencia?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EstoqueItemUpdateWithoutEstoqueInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    item?: EquipamentoUpdateOneRequiredWithoutEstoqueItensNestedInput
  }

  export type EstoqueItemUncheckedUpdateWithoutEstoqueInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type EstoqueItemUncheckedUpdateManyWithoutEstoqueInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}